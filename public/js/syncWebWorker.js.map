{"version":3,"file":"syncWebWorker.js","mappings":"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","sources":["webpack://dntd-web/./src/errors/FriendlyError.ts","webpack://dntd-web/./src/errors/SyncerError.ts","webpack://dntd-web/./src/errors/index.ts","webpack://dntd-web/./src/types/index.ts","webpack://dntd-web/./src/types/search.ts","webpack://dntd-web/./src/types/syncer.ts","webpack://dntd-web/./src/types/testing.ts","webpack://dntd-web/./src/workers/sync/index.ts","webpack://dntd-web/./src/workers/sync/messages.ts","webpack://dntd-web/./src/workers/sync/syncWebWorker.ts","webpack://dntd-web/./src/workers/sync/tasks/BaseTask.ts","webpack://dntd-web/./src/workers/sync/tasks/CreateRowTask.ts","webpack://dntd-web/./src/workers/sync/tasks/DeleteRowTask.ts","webpack://dntd-web/./src/workers/sync/tasks/ExtendSheetTask.ts","webpack://dntd-web/./src/workers/sync/tasks/GetRowsTask.ts","webpack://dntd-web/./src/workers/sync/tasks/GetSpreadsheetTask.ts","webpack://dntd-web/./src/workers/sync/tasks/UpdateRowTask.ts","webpack://dntd-web/./src/workers/sync/tasks/index.ts","webpack://dntd-web/./src/workers/sync/typeGuards.ts","webpack://dntd-web/webpack/bootstrap","webpack://dntd-web/webpack/startup"],"sourcesContent":["export class FriendlyError extends Error {\n    public msg: string\n    public friendlyMsg: string\n\n    constructor(errorMsg: string, friendlyMsg: string) {\n        super(errorMsg)\n        this.msg = errorMsg\n        this.friendlyMsg = friendlyMsg\n    }\n}\n","import { ErrorPayload, SyncerPayloadType } from \"../types\"\n\nexport class SyncerError extends Error {\n    public payload: ErrorPayload\n\n    constructor(errorMsg: string, public friendlyMsg: string, public needsReAuth: boolean, pause?: boolean, rejects?: boolean) {\n        super(errorMsg)\n        this.payload = {\n            pause: (pause !== undefined) ? pause : true,\n            error: this,\n            friendlyMsg: this.friendlyMsg,\n            type: SyncerPayloadType.ERROR,\n            rejects: (rejects !== undefined) ? rejects : false,\n        }\n    }\n}\n","export * from \"./GapiErrors\"\nexport * from \"./SyncerError\"\nexport * from \"./FriendlyError\"\n","export * from \"./caret\"\nexport * from \"./search\"\nexport * from \"./testing\"\nexport * from \"./syncer\"\n","export enum SearchType {\n    NONE,\n    AND,\n    OR,\n}\n","import { TestMode } from \"./testing\"\n\nexport type SyncerPayload = (\n    GetRowsPayload | GetSpreadsheetPayload | UpdateRowPayload |\n    ExtendSheetPayload | DeleteRowPayload | TestModeUpdatePayload |\n    AuthUpdatePayload | UnpausePayload | SyncStatePayload | ErrorPayload |\n    TokenRequestPayload | CreateRowPayload\n)\n\nexport enum SyncerPayloadType {\n    AUTH_UPDATE,\n    DELETE_ROW,\n    UPDATE_ROW,\n    GET_ROWS,\n    TEST_MODE_UPDATE,\n    UNPAUSE,\n    GET_SPREADSHEET,\n    EXTEND_SHEET,\n    CREATE_ROW,\n    MOVE_ROW,\n    ERROR,\n    TOKEN_REQUEST,\n    SYNC_STATE,\n}\n\nexport enum SyncerResponseType {\n    SYNCER_STATE,\n    ERROR,\n    REAUTH,\n}\n\nexport enum SyncerState {\n    PAUSED = \"cloud_off\",\n    UPLOADING = \"cloud_upload\",\n    DOWNLOADING = \"cloud_download\",\n    SYNCED = \"cloud_done\",\n    INITIALIZING = \"cloud_queue\",\n}\n\nexport interface TestModeUpdatePayload {\n    type: SyncerPayloadType.TEST_MODE_UPDATE\n    testMode: TestMode\n    rejects: boolean\n}\n\nexport interface AuthUpdatePayload {\n    type: SyncerPayloadType.AUTH_UPDATE\n    token: string\n    rejects: boolean\n}\n\nexport interface UnpausePayload {\n    type: SyncerPayloadType.UNPAUSE\n    rejects: boolean\n}\n\nexport interface DeleteRowPayload {\n    type: SyncerPayloadType.DELETE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n    rejects: boolean\n}\n\nexport interface CreateRowPayload {\n    type: SyncerPayloadType.CREATE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n    rejects: boolean\n}\n\nexport interface ExtendSheetPayload {\n    type: SyncerPayloadType.EXTEND_SHEET\n    spreadsheetId: string\n    sheetId: number\n    rejects: boolean\n}\n\nexport interface UpdateRowPayload {\n    type: SyncerPayloadType.UPDATE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n    sheetTitle: string\n    content: string\n    rejects: boolean\n}\n\nexport interface GetSpreadsheetPayload {\n    type: SyncerPayloadType.GET_SPREADSHEET\n    spreadsheetId: string\n    spreadsheet?: gapi.client.sheets.Spreadsheet\n    rejects: boolean\n}\n\nexport interface GetRowsPayload {\n    type: SyncerPayloadType.GET_ROWS\n    spreadsheetId: string\n    sheetId: number\n    sheetTitle: string\n    rows: string[]\n    rejects: boolean\n}\n\nexport interface SyncStatePayload {\n    type: SyncerPayloadType.SYNC_STATE\n    length: number\n    state: SyncerState\n    rejects: boolean\n}\n\nexport interface ErrorPayload {\n    type: SyncerPayloadType.ERROR\n    error: Error\n    pause: boolean\n    friendlyMsg: string\n    rejects: boolean\n}\n\nexport interface TokenRequestPayload {\n    type: SyncerPayloadType.TOKEN_REQUEST\n    rejects: boolean\n}\n","export enum TestMode {\n    OFF = \"0\",\n    WORKING = \"1\",\n    FAIL_GET_SPREADSHEET_SHEETS = \"2\",\n    FAIL_GET_RANGE = \"3\",\n    FAIL_UPDATE_RANGE = \"4\",\n    FAIL_DELETE_ROW = \"5\",\n    RETURN_ROWS = \"6\",\n    DEMO = \"demomode\"\n}\n\nexport function instanceOfTestMode(str: string): str is TestMode {\n    return ((<any>Object).values(TestMode).includes(str))\n}\n","export * from \"./typeGuards\"\nexport * from \"./syncWebWorker\"\n","import { SyncerPayload, SyncerPayloadType, SyncerState } from \"../../types\"\n\nexport function postSyncStateMessage(length: number, state: SyncerState) {\n    postResponse({\n        length: length,\n        state: state,\n        type: SyncerPayloadType.SYNC_STATE,\n        rejects: false,\n    })\n}\n\nexport function postTokenRequestMessage() {\n    postResponse({\n        type: SyncerPayloadType.TOKEN_REQUEST,\n        rejects: false\n    })\n}\n\nfunction postResponse(payload: SyncerPayload) {\n    postMessage({payload})\n}\n","import { instanceOfSyncerError } from \".\"\nimport { SyncerError } from \"../../errors\"\nimport { TaskFactory, BaseTask } from \"./tasks\"\nimport { postTokenRequestMessage, postSyncStateMessage } from \"./messages\"\nimport { SyncerState, SyncerPayload, TestMode, SyncerPayloadType } from \"../../types\"\n\nexport const syncRate = 250 // ms\nconst taskFactory = new TaskFactory()\nconst downloadQueue: Map<string, BaseTask<SyncerPayload>> = new Map()\nconst uploadQueue: { id: string, task: BaseTask<SyncerPayload> }[] = []\n\nlet pendingDownloads = 0\nlet testMode: TestMode = TestMode.OFF\nlet token: string | undefined = undefined\nlet state: SyncerState = SyncerState.SYNCED\n\nsync()\nonmessage = (msg) => prequeue(msg)\n\nfunction prequeue(msg: MessageEvent) {\n    const { id, payload }: { id: string, payload: SyncerPayload } = msg.data\n\n    switch (payload.type) {\n        case SyncerPayloadType.TEST_MODE_UPDATE:\n            testMode = payload.testMode\n            if (testMode !== TestMode.OFF) token = \"mock\"\n            return\n        case SyncerPayloadType.AUTH_UPDATE:\n            token = payload.token\n            return\n        case SyncerPayloadType.UNPAUSE:\n            updateSyncState(SyncerState.UPLOADING)\n            return\n    }\n\n    let task = taskFactory.createTask(payload, testMode)\n    if (task === undefined) return\n\n    if (task.async) {\n        downloadQueue.set(id, task)\n    } else {\n        uploadQueue.push({ id, task })\n    }\n}\n\nasync function sync() {\n    while (true) {\n        await sleep(syncRate)\n        if (isSynced()) updateSyncState(SyncerState.SYNCED)\n        workDownloadQueueTasks()\n        await workUploadQueueTasks()\n    }\n}\n\nfunction isSynced() {\n    if (\n        state !== SyncerState.PAUSED &&\n        state !== SyncerState.SYNCED &&\n        uploadQueue.length + downloadQueue.size + pendingDownloads === 0\n    ) {\n        return true\n    }\n    return false\n}\n\nfunction updateSyncState(newState?: SyncerState) {\n    if (newState !== undefined && state !== newState) {\n        state = newState\n        postSyncStateMessage(uploadQueue.length, state)\n    }\n}\n\nfunction handleSyncError(error: Error | SyncerError, id: string) {\n    let syncerError: SyncerError = (instanceOfSyncerError(error)\n        ? error\n        : new SyncerError(error.message, \"Unknown Error\", false))\n\n    if (syncerError.needsReAuth) {\n        postTokenRequestMessage()\n        token = undefined\n        return\n    } else {\n        if (syncerError.payload.pause) updateSyncState(SyncerState.PAUSED)\n        postMessage({ id, error: syncerError.payload })\n    }\n}\n\nasync function workUploadQueueTasks() {\n    while (uploadQueue.length !== 0 && token && state !== SyncerState.PAUSED) {\n        updateSyncState(SyncerState.UPLOADING)\n        let { id, task } = uploadQueue[0]\n        try {\n            let payload = await task.work(token)\n            postMessage({ id, payload })\n            uploadQueue.shift()\n        } catch (error) {\n            handleSyncError(error, id)\n        }\n    }\n}\n\nfunction workDownloadQueueTasks() {\n    if (downloadQueue.size === 0 || !token || state === SyncerState.PAUSED) return\n    updateSyncState(SyncerState.DOWNLOADING)\n    for (let [id, task] of downloadQueue.entries()) {\n        pendingDownloads += 1\n        downloadQueue.delete(id)\n        task.work(token)\n            .then((payload: SyncerPayload) => postMessage({ id, payload }))\n            .catch((error: SyncerError) => handleSyncError(error, id))\n            .finally(() => pendingDownloads -= 1)\n    }\n}\n\nfunction sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\n","import { SyncerPayload, TestMode, SyncerPayloadType } from \"../../../types\"\nimport {\n    createGetRowsTask, createGetSpreadsheetTask, createDeleteRowTask,\n    createUpdateRowTask, createCreateRowTask\n} from \".\"\n\nexport class TaskFactory {\n    public createTask(payload: SyncerPayload, testMode: TestMode): BaseTask<SyncerPayload> | undefined {\n        switch(payload.type) {\n            case SyncerPayloadType.CREATE_ROW:\n                return createCreateRowTask(payload, testMode)\n            case SyncerPayloadType.GET_ROWS:\n                return createGetRowsTask(payload, testMode)\n            case SyncerPayloadType.GET_SPREADSHEET:\n                return createGetSpreadsheetTask(payload, testMode)\n            case SyncerPayloadType.UPDATE_ROW:\n                return createUpdateRowTask(payload, testMode)\n            case SyncerPayloadType.DELETE_ROW:\n                return createDeleteRowTask(payload, testMode)\n            // TODO - NICE TO HAVE\n            // case SyncerPayloadType.MOVE_ROW:\n            //     return undefined\n            default:\n                console.warn(\"Task factory told to build unsupported task\")\n                return undefined\n        }\n        return\n    }\n\n}\n\nexport abstract class BaseTask<P extends SyncerPayload> {\n    public payload: P\n    public async: boolean | undefined\n    public testMode: TestMode = TestMode.OFF\n\n    constructor(payload: P, testMode?: TestMode) {\n        this.payload = payload\n        this.testMode = (testMode !== undefined) ? testMode : this.testMode\n    }\n\n    public abstract work(token: string): Promise<P>\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { CreateRowPayload, TestMode } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport function createCreateRowTask<P extends CreateRowPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new CreateRowTask(payload)\n        : new MockCreateRowTask(payload, testMode)\n}\n\nexport class CreateRowTask<P extends CreateRowPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n    }\n\n    public async work(token: string): Promise<P> {\n        let range = { sheetId: this.payload.sheetId, startIndex: this.payload.idx, endIndex: this.payload.idx + 1, dimension: \"ROWS\" }\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ insertDimension: { range: range } }] })\n        let opts: RequestInit = { method: \"POST\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), \"Failed to create new entry\", response.status === 401)\n        }\n        return this.payload\n    }\n}\n\nexport class MockCreateRowTask<P extends CreateRowPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n    }\n\n    public async work(_token: string): Promise<P> {\n        if (this.testMode === TestMode.FAIL_DELETE_ROW) {\n            let error = new Error(\"mock fail\")\n            throw new SyncerError(JSON.stringify(error), \"Failed to create new entry\", false)\n        }\n        return this.payload\n    }\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { DeleteRowPayload, TestMode } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport function createDeleteRowTask<P extends DeleteRowPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new DeleteRowTask(payload)\n        : new MockDeleteRowTask(payload, testMode)\n}\n\nexport class DeleteRowTask<P extends DeleteRowPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n    }\n\n    public async work(token: string): Promise<P> {\n        let range = { sheetId: this.payload.sheetId, startRowIndex: this.payload.idx, endRowIndex: this.payload.idx + 1, startColumnIndex: 0 }\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ deleteRange: { range: range, shiftDimension: \"ROWS\" } }] })\n        let opts: RequestInit = { method: \"POST\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), \"Failed to delete entry\", response.status === 401)\n        }\n        return this.payload\n    }\n}\n\nexport class MockDeleteRowTask<P extends DeleteRowPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n    }\n\n    public async work(_token: string): Promise<P> {\n        if (this.testMode === TestMode.FAIL_DELETE_ROW) {\n            let error = new Error(\"mock fail\")\n            throw new SyncerError(JSON.stringify(error), \"Failed to delete entry\", false)\n        }\n        return this.payload\n    }\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { ExtendSheetPayload } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport class ExtendSheetTask<P extends ExtendSheetPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n    }\n\n    public async work(token: string): Promise<P> {\n        let extendSheetLength = 100\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ appendDimension: { sheetId: this.payload.sheetId, dimension: \"ROWS\", length: extendSheetLength } }] })\n        let opts: RequestInit = { method: \"POST\", mode: \"cors\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), \"Failed to extend Google Sheet\", response.status === 401)\n        }\n        return this.payload\n    }\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { GetRowsPayload, TestMode } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport function createGetRowsTask<P extends GetRowsPayload>(payload: P, testMode: TestMode): BaseTask<P> {\n    return (testMode === TestMode.OFF)\n        ? new GetRowsTask(payload)\n        : new MockGetRowsTask(payload, testMode)\n}\n\nexport class GetRowsTask<P extends GetRowsPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n        this.async = true\n    }\n\n    public async work(token: string): Promise<P> {\n        let range = `${this.payload.sheetTitle}!A:A`\n        let url = `https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}/values/${range}`\n        let headers = { Authorization: `Bearer ${token}` }\n        let opts: RequestInit = { method: \"GET\", cache: \"no-cache\", headers: headers }\n        let response = await fetch(url, opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), `Failed to load entries from ${this.payload.spreadsheetId}`, response.status === 401, true, true)\n        } else {\n            let data: gapi.client.sheets.ValueRange = await response.json()\n            this.payload.rows = (data.values) ? data.values.map(row => row[0]) : []\n        }\n        return this.payload\n    }\n}\n\nexport class MockGetRowsTask<P extends GetRowsPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n        this.async = true\n    }\n\n    public async work(_token: string): Promise<P> {\n        if (this.testMode === TestMode.FAIL_GET_RANGE) {\n            let error = new Error(\"mock fail\")\n            throw new SyncerError(JSON.stringify(error), `Failed to load entries from ${this.payload.spreadsheetId}`, false, true, true)\n        }\n        if (this.testMode === TestMode.RETURN_ROWS) {\n            this.payload.rows = [\"aaa\", \"bbb\", \"ccc\", \"@tag\", \"@key:value\"]\n        }\n        return this.payload\n    }\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { GetSpreadsheetPayload, TestMode } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport function createGetSpreadsheetTask<P extends GetSpreadsheetPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new GetSpreadsheetTask(payload)\n        : new MockGetSpreadsheetTask(payload, testMode)\n}\n\nexport class GetSpreadsheetTask<P extends GetSpreadsheetPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n        this.async = true\n    }\n\n    public async work(token: string): Promise<P> {\n        let url = `https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}`\n        let headers = { Authorization: `Bearer ${token}` }\n        let opts: RequestInit = { method: \"GET\", cache: \"no-cache\", headers: headers }\n        let response = await fetch(url, opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), `Could not get spreadsheet information for ${this.payload.spreadsheetId}`, response.status === 401, false, true)\n        } else {\n            this.payload.spreadsheet = await response.json()\n        }\n        return this.payload\n    }\n}\n\nexport class MockGetSpreadsheetTask<P extends GetSpreadsheetPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n        this.async = true\n    }\n\n    public async work(_token: string): Promise<P> {\n        if (this.testMode === TestMode.FAIL_GET_SPREADSHEET_SHEETS) {\n            let error = new Error(\"mock fail\")\n            throw new SyncerError(JSON.stringify(error), `Could not get spreadsheet information for ${this.payload.spreadsheetId}`, false, false, true)\n        }\n        this.payload.spreadsheet = {\n            \"spreadsheetId\": this.payload.spreadsheetId,\n            \"spreadsheetUrl\": `https://docs.google.com/spreadsheets/d/${this.payload.spreadsheetId}/edit`,\n            \"properties\": {\n                \"title\": \"Mock Journal\",\n            },\n            \"sheets\": [\n                {\n                    \"properties\": {\n                        \"sheetId\": 0,\n                        \"title\": \"Sheet1\",\n                    }\n                },\n                {\n                    \"properties\": {\n                        \"sheetId\": 1124780423,\n                        \"title\": \"Sheet2\",\n                    }\n                },\n                {\n                    \"properties\": {\n                        \"sheetId\": 1286561930,\n                        \"title\": \"Sheet3\",\n                    }\n                }\n            ]\n        }\n        return this.payload\n    }\n}","import { BaseTask } from \"./BaseTask\"\nimport { ExtendSheetTask } from \"./ExtendSheetTask\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\nimport { UpdateRowPayload, SyncerPayload, TestMode, SyncerPayloadType } from \"../../../types\"\n\nexport function createUpdateRowTask<P extends UpdateRowPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new UpdateRowTask(payload)\n        : new MockUpdateRowTask(payload, testMode)\n}\n\nexport class UpdateRowTask<P extends UpdateRowPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n    }\n\n    public async work(token: string): Promise<P> {\n        let range = `${this.payload.sheetTitle}!A${this.payload.idx + 1}:A${this.payload.idx + 1}`\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}/values/${range}`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let params: Record<string, string> = { valueInputOption: \"RAW\" }\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n        let body = JSON.stringify({ range: range, majorDimension: \"ROWS\", values: [[this.payload.content]] })\n        let opts: RequestInit = { method: \"PUT\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        let data = await response.json()\n        if (!response.ok) {\n            if (data.error.message.includes(\"exceeds grid limits\")) {\n                let extendSheetTask: SyncerPayload = {\n                    type: SyncerPayloadType.EXTEND_SHEET,\n                    spreadsheetId: this.payload.spreadsheetId,\n                    sheetId: this.payload.sheetId,\n                    rejects: false,\n                }\n                await new ExtendSheetTask(extendSheetTask).work(token)\n                let secondResponse = await fetch(url.toString(), opts)\n                if (!secondResponse.ok) {\n                    let error: GapiErrorResponse = await response.json()\n                    throw new SyncerError(JSON.stringify(error), \"Failed to update entry\", response.status === 401)\n                } else {\n                    return this.payload\n                }\n            }\n            throw new SyncerError(JSON.stringify(data), \"Failed to update entry\", response.status === 401)\n        }\n        return this.payload\n    }\n}\n\nexport class MockUpdateRowTask<P extends UpdateRowPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n    }\n\n    public async work(): Promise<P> {\n        if (this.testMode === TestMode.FAIL_UPDATE_RANGE) {\n            let error = new Error(\"mock fail\")\n            throw new SyncerError(JSON.stringify(error), \"Failed to update entry\", false)\n        }\n        return this.payload\n    }\n}\n","export * from \"./BaseTask\"\nexport * from \"./GetRowsTask\"\nexport * from \"./CreateRowTask\"\nexport * from \"./UpdateRowTask\"\nexport * from \"./DeleteRowTask\"\n// export * from \"./MoveRowTask\"\nexport * from \"./ExtendSheetTask\"\nexport * from \"./GetSpreadsheetTask\"","import { SyncerError } from \"../../errors\"\n\nexport function instanceOfSyncerError(error: Error | SyncerError): error is SyncerError {\n    return \"needsReAuth\" in error\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(3341);\n"],"names":["FriendlyError","Error","constructor","errorMsg","friendlyMsg","super","this","msg","SyncerError","needsReAuth","pause","rejects","payload","undefined","error","type","SyncerPayloadType","ERROR","SearchType","SyncerState","SyncerResponseType","TestMode","str","Object","values","includes","postResponse","postMessage","length","state","SYNC_STATE","TOKEN_REQUEST","syncRate","taskFactory","TaskFactory","downloadQueue","Map","uploadQueue","token","pendingDownloads","testMode","OFF","SYNCED","updateSyncState","newState","postSyncStateMessage","handleSyncError","id","syncerError","instanceOfSyncerError","message","postTokenRequestMessage","PAUSED","workUploadQueueTasks","UPLOADING","task","work","shift","workDownloadQueueTasks","size","DOWNLOADING","entries","delete","then","catch","finally","sleep","ms","Promise","resolve","setTimeout","sync","onmessage","data","TEST_MODE_UPDATE","AUTH_UPDATE","UNPAUSE","createTask","async","set","push","prequeue","CREATE_ROW","createCreateRowTask","GET_ROWS","createGetRowsTask","GET_SPREADSHEET","createGetSpreadsheetTask","UPDATE_ROW","createUpdateRowTask","DELETE_ROW","createDeleteRowTask","console","warn","CreateRowTask","MockCreateRowTask","BaseTask","range","sheetId","startIndex","idx","endIndex","dimension","url","URL","spreadsheetId","opts","method","cache","headers","Authorization","body","JSON","stringify","requests","insertDimension","response","fetch","toString","ok","json","status","_token","FAIL_DELETE_ROW","DeleteRowTask","MockDeleteRowTask","startRowIndex","endRowIndex","startColumnIndex","deleteRange","shiftDimension","ExtendSheetTask","mode","appendDimension","GetRowsTask","MockGetRowsTask","sheetTitle","rows","map","row","FAIL_GET_RANGE","RETURN_ROWS","GetSpreadsheetTask","MockGetSpreadsheetTask","spreadsheet","FAIL_GET_SPREADSHEET_SHEETS","UpdateRowTask","MockUpdateRowTask","params","valueInputOption","keys","forEach","key","searchParams","append","majorDimension","content","extendSheetTask","EXTEND_SHEET","FAIL_UPDATE_RANGE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"sourceRoot":""}