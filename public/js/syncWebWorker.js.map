{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/types/index.ts","webpack:///./src/workers/sync/tasks/BaseTask.ts","webpack:///./src/workers/sync/index.ts","webpack:///./src/types/search.ts","webpack:///./src/types/testing.ts","webpack:///./src/types/syncer.ts","webpack:///./src/workers/sync/tasks/index.ts","webpack:///./src/workers/sync/tasks/ExtendSheetTask.ts","webpack:///./src/workers/sync/syncWebWorker.ts","webpack:///./src/workers/sync/tasks/GetRowsTask.ts","webpack:///./src/workers/sync/typeGuards.ts","webpack:///./src/workers/sync/tasks/GetSheetsTask.ts","webpack:///./src/workers/sync/tasks/UpdateRowTask.ts","webpack:///./src/workers/sync/tasks/DeleteRowTask.ts","webpack:///./src/workers/sync/tasks/GetSpreadsheetTask.ts","webpack:///./src/workers/sync/messages.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","payload","testMode","type","SyncerPayloadType","GET_ROWS","createGetRowsTask","GET_SPREADSHEET","createGetSpreadsheetTask","GET_SHEETS","createGetSheetsTask","DELETE_ROW","createDeleteRowTask","UPDATE_ROW","createUpdateRowTask","TestMode","OFF","this","undefined","SyncerError","Error","errorMsg","friendlyMsg","needsReAuth","super","SearchType","SyncerResponseType","SyncerState","ExtendSheetTask","BaseTask","token","url","URL","spreadsheetId","opts","method","cache","headers","Authorization","body","JSON","stringify","requests","appendDimension","sheetId","dimension","length","response","fetch","toString","ok","error","json","status","paused","taskFactory","TaskFactory","state","SYNCED","parallelDownloadQueue","Map","seriesUploadQueue","isSynced","size","updateSyncState","newState","postSyncStateMessage","handleSyncError","instanceOfSyncerError","postTokenRequestMessage","PAUSED","postErrorMessage","message","workSeriesQueueTasks","UPLOADING","id","task","work","postMessage","shift","workParallelQueueTasks","DOWNLOADING","entries","delete","then","catch","set","sleep","ms","Promise","resolve","setTimeout","sync","onmessage","msg","data","TEST_MODE_UPDATE","AUTH_UPDATE","UNPAUSE","createTask","async","push","prequeue","GetRowsTask","MockGetRowsTask","range","sheetTitle","rows","values","map","row","_token","FAIL_GET_RANGE","RETURN_ROWS","GetSheetsTask","sheets","UpdateRowTask","idx","params","valueInputOption","keys","forEach","searchParams","append","majorDimension","content","includes","extendSheetTask","EXTEND_SHEET","DeleteRowTask","startRowIndex","endRowIndex","startColumnIndex","deleteRange","shiftDimension","GetSpreadsheetTask","spreadsheet","postResponse","console","log","SYNC_STATE","ERROR","TOKEN_REQUEST"],"mappings":"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","file":"syncWebWorker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 42);\n","export * from \"./caret\"\nexport * from \"./errors\"\nexport * from \"./search\"\nexport * from \"./testing\"\nexport * from \"./syncer\"\n","import { SyncerPayload, TestMode, SyncerPayloadType } from \"../../../types\"\nimport {\n    createGetRowsTask, createGetSpreadsheetTask, createGetSheetsTask,\n    createDeleteRowTask, createUpdateRowTask\n} from \".\"\n\nexport class TaskFactory {\n    public createTask(payload: SyncerPayload, testMode: TestMode): BaseTask<SyncerPayload> | undefined {\n        switch(payload.type) {\n            case SyncerPayloadType.GET_ROWS:\n                return createGetRowsTask(payload, testMode)\n            case SyncerPayloadType.GET_SPREADSHEET:\n                return createGetSpreadsheetTask(payload, testMode)\n            case SyncerPayloadType.GET_SHEETS:\n                return createGetSheetsTask(payload, testMode)\n            case SyncerPayloadType.DELETE_ROW:\n                return createDeleteRowTask(payload, testMode)\n            case SyncerPayloadType.UPDATE_ROW:\n                return createUpdateRowTask(payload, testMode)\n            // case SyncerPayloadType.CREATE_ROW:\n            //     return undefined // TODO\n            // case SyncerPayloadType.MOVE_ROW:\n            //     return undefined // TODO\n            default:\n                return undefined\n        }\n        return\n    }\n\n}\n\nexport abstract class BaseTask<P extends SyncerPayload> {\n    public payload: P\n    public async: boolean | undefined\n    public testMode: TestMode = TestMode.OFF\n\n    constructor(payload: P, testMode?: TestMode) {\n        this.payload = payload\n        this.testMode = (testMode !== undefined) ? testMode : this.testMode\n    }\n\n    public abstract work(token: string): Promise<P>\n}\n","export * from \"./typeGuards\"\nexport * from \"./syncWebWorker\"\n\n// TODO: see if this can be moved\nexport class SyncerError extends Error {\n    constructor(errorMsg: string, public friendlyMsg: string, public needsReAuth: boolean) {\n        super(errorMsg)\n    }\n}\n","export enum SearchType {\n    NONE,\n    AND,\n    OR,\n}\n","export enum TestMode {\n    OFF = \"0\",\n    WORKING = \"1\",\n    FAIL_GET_SPREADSHEET_SHEETS = \"2\",\n    FAIL_GET_RANGE = \"3\",\n    FAIL_UPDATE_RANGE = \"4\",\n    FAIL_DELETE_ROW = \"5\",\n    RETURN_ROWS = \"6\",\n    DEMO = \"7\"\n}\n","import { TestMode } from \"./testing\"\nimport { SyncerError } from \"../workers/sync\"\n\nexport type SyncerPayload = (\n    GetRowsPayload | GetSheetsPayload | GetSpreadsheetPayload | UpdateRowPayload |\n    ExtendSheetPayload | DeleteRowPayload | TestModeUpdatePayload | AuthUpdatePayload |\n    UnpausePayload | SyncStatePayload | ErrorPayload | TokenRequestPayload\n)\n\nexport enum SyncerPayloadType {\n    AUTH_UPDATE,\n    DELETE_ROW,\n    UPDATE_ROW,\n    GET_ROWS,\n    GET_SHEETS,\n    TEST_MODE_UPDATE,\n    UNPAUSE,\n    GET_SPREADSHEET,\n    EXTEND_SHEET,\n    CREATE_ROW,\n    MOVE_ROW,\n    ERROR,\n    TOKEN_REQUEST,\n    SYNC_STATE,\n}\n\nexport enum SyncerResponseType {\n    SYNCER_STATE,\n    ERROR,\n    REAUTH,\n}\n\nexport enum SyncerState {\n    PAUSED = \"cloud_off\",\n    UPLOADING = \"cloud_upload\",\n    DOWNLOADING = \"cloud_download\",\n    SYNCED = \"cloud_done\",\n}\n\nexport interface TestModeUpdatePayload {\n    type: SyncerPayloadType.TEST_MODE_UPDATE\n    testMode: TestMode\n}\n\nexport interface AuthUpdatePayload {\n    type: SyncerPayloadType.AUTH_UPDATE\n    token: string\n}\n\nexport interface UnpausePayload {\n    type: SyncerPayloadType.UNPAUSE\n}\n\nexport interface DeleteRowPayload {\n    type: SyncerPayloadType.DELETE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n}\n\nexport interface ExtendSheetPayload {\n    type: SyncerPayloadType.EXTEND_SHEET\n    spreadsheetId: string\n    sheetId: number\n}\n\nexport interface UpdateRowPayload {\n    type: SyncerPayloadType.UPDATE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n    sheetTitle: string\n    content: string\n}\n\nexport interface GetSpreadsheetPayload {\n    type: SyncerPayloadType.GET_SPREADSHEET\n    spreadsheetId: string\n    spreadsheet?: gapi.client.sheets.Spreadsheet\n}\n\nexport interface GetRowsPayload {\n    type: SyncerPayloadType.GET_ROWS\n    spreadsheetId: string\n    sheetId: number\n    sheetTitle: string\n    rows: string[]\n}\n\nexport interface GetSheetsPayload {\n    type: SyncerPayloadType.GET_SHEETS\n    spreadsheetId: string\n    sheets: gapi.client.sheets.Sheet[]\n}\n\nexport interface SyncStatePayload {\n    type: SyncerPayloadType.SYNC_STATE\n    length: number\n    state: SyncerState\n}\n\nexport interface ErrorPayload {\n    type: SyncerPayloadType.ERROR\n    error: SyncerError | Error\n    friendlyMsg: string\n}\n\nexport interface TokenRequestPayload {\n    type: SyncerPayloadType.TOKEN_REQUEST\n}\n","export * from \"./BaseTask\"\nexport * from \"./GetRowsTask\"\n// export * from \"./MoveRowTask\"\nexport * from \"./GetSheetsTask\"\nexport * from \"./UpdateRowTask\"\nexport * from \"./ExtendSheetTask\"\nexport * from \"./DeleteRowTask\"\n// export * from \"./CreateRowTask\"\nexport * from \"./GetSpreadsheetTask\"\n","import { SyncerError } from \"..\"\nimport { BaseTask } from \"./BaseTask\"\nimport { GapiErrorResponse, ExtendSheetPayload } from \"../../../types\"\n\nexport class ExtendSheetTask<P extends ExtendSheetPayload> extends BaseTask<P> {\n    constructor(payload: P) { super(payload) }\n\n    public async work(token: string): Promise<P> {\n        let extendSheetLength = 100\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ appendDimension: { sheetId: this.payload.sheetId, dimension: \"ROWS\", length: extendSheetLength } }] })\n        let opts: RequestInit = { method: \"POST\", mode: \"cors\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), \"Failed to extend sheet\", response.status === 401)\n        }\n        return this.payload\n    }\n}\n","import { TaskFactory, BaseTask } from \"./tasks\"\nimport { instanceOfSyncerError, SyncerError } from \".\"\nimport { SyncerState, SyncerPayload, TestMode, SyncerPayloadType } from \"../../types\"\nimport { postTokenRequestMessage, postSyncStateMessage, postErrorMessage } from \"./messages\"\n\nconst syncRate = 250 // ms\nlet paused: boolean = false\nlet testMode: TestMode = TestMode.OFF\nconst taskFactory = new TaskFactory()\nlet token: string | undefined = undefined\nlet state: SyncerState = SyncerState.SYNCED\nconst parallelDownloadQueue: Map<string, BaseTask<SyncerPayload>> = new Map()\nconst seriesUploadQueue: { id: string, task: BaseTask<SyncerPayload> }[] = []\n\nsync()\nonmessage = (msg) => prequeue(msg)\n\nfunction prequeue(msg: MessageEvent) {\n    const { id, payload }: { id: string, payload: SyncerPayload } = msg.data\n\n    switch (payload.type) {\n        case SyncerPayloadType.TEST_MODE_UPDATE:\n            testMode = payload.testMode\n            if (testMode !== TestMode.OFF) token = \"mock\"\n            return\n        case SyncerPayloadType.AUTH_UPDATE:\n            token = payload.token\n            return\n        case SyncerPayloadType.UNPAUSE:\n            paused = false\n            return\n    }\n\n    let task = taskFactory.createTask(payload, testMode)\n    if (task === undefined) return\n\n    if (task.async) {\n        parallelDownloadQueue.set(id, task)\n    } else {\n        seriesUploadQueue.push({ id, task })\n    }\n}\n\nasync function sync() {\n    while (true) {\n        await sleep(syncRate)\n        if (isSynced()) updateSyncState(SyncerState.SYNCED)\n        try {\n            workParallelQueueTasks()\n            await workSeriesQueueTasks()\n        } catch (error) {\n            handleSyncError(error)\n        }\n    }\n}\n\nfunction isSynced() {\n    if (\n        !paused &&\n        state !== SyncerState.SYNCED &&\n        seriesUploadQueue.length + parallelDownloadQueue.size === 0\n    ) {\n        return true\n    }\n    return false\n}\n\nfunction updateSyncState(newState?: SyncerState) {\n    if (newState !== undefined && state !== newState) {\n        state = newState\n        postSyncStateMessage(seriesUploadQueue.length, state)\n    }\n}\n\nfunction handleSyncError(error: Error | SyncerError) {\n    if (instanceOfSyncerError(error) && error.needsReAuth) {\n        postTokenRequestMessage()\n        token = undefined\n    } else {\n        paused = true\n        updateSyncState(SyncerState.PAUSED)\n        postErrorMessage((instanceOfSyncerError(error))\n            ? error\n            : new SyncerError(error.message, \"Unknown Error\", false))\n    }\n}\n\nasync function workSeriesQueueTasks() {\n    while (seriesUploadQueue.length !== 0 && token && !paused) {\n        updateSyncState(SyncerState.UPLOADING)\n        let { id, task } = seriesUploadQueue[0]\n        let payload = await task.work(token)\n        postMessage({ id, payload })\n        seriesUploadQueue.shift()\n    }\n}\n\nfunction workParallelQueueTasks() {\n    if (parallelDownloadQueue.size === 0 || !token || paused) return\n    updateSyncState(SyncerState.DOWNLOADING)\n    for (let [id, task] of parallelDownloadQueue.entries()) {\n        parallelDownloadQueue.delete(id)\n        task.work(token).then((payload: SyncerPayload) => {\n            postMessage({ id, payload })\n        }).catch((error: Error) => {\n            parallelDownloadQueue.set(id, task)\n            throw error\n        })\n    }\n}\n\nfunction sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import { SyncerError } from \"..\"\nimport { BaseTask } from \"./BaseTask\"\nimport { GapiErrorResponse, GetRowsPayload, TestMode } from \"../../../types\"\n\nexport function createGetRowsTask<P extends GetRowsPayload>(payload: P, testMode: TestMode): BaseTask<P> {\n    return (testMode === TestMode.OFF)\n        ? new GetRowsTask(payload)\n        : new MockGetRowsTask(payload, testMode)\n}\n\nexport class GetRowsTask<P extends GetRowsPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n        this.async = true\n    }\n\n    public async work(token: string): Promise<P> {\n        let range = `${this.payload.sheetTitle}!A:A`\n        let url = `https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}/values/${range}`\n        let headers = { Authorization: `Bearer ${token}` }\n        let opts: RequestInit = { method: \"GET\", cache: \"no-cache\", headers: headers }\n        let response = await fetch(url, opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(\n                JSON.stringify(error),\n                `Failed to get sheet rows: ${range}`,\n                response.status === 401)\n        } else {\n            let data: gapi.client.sheets.ValueRange = await response.json()\n            this.payload.rows = (data.values) ? data.values.map(row => row[0]) : []\n        }\n        return this.payload\n    }\n}\n\nexport class MockGetRowsTask<P extends GetRowsPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n        this.async = true\n    }\n\n    public async work(_token: string): Promise<P> {\n        if (this.testMode === TestMode.FAIL_GET_RANGE) {\n            throw new Error(\"mock fail\")\n        } else if (this.testMode === TestMode.RETURN_ROWS) {\n            this.payload.rows = [\"aaa\", \"bbb\", \"ccc\", \"@tag\", \"@key:value\"]\n        }\n        return this.payload\n    }\n}\n","import { SyncerError } from \".\"\n\nexport function instanceOfSyncerError(error: Error | SyncerError): error is SyncerError {\n    return \"needsReAuth\" in error\n}\n","import { SyncerError } from \"..\"\nimport { BaseTask } from \"./BaseTask\"\nimport { GapiErrorResponse, GetSheetsPayload, TestMode } from \"../../../types\"\n\nexport function createGetSheetsTask<P extends GetSheetsPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new GetSheetsTask(payload)\n        : undefined // new MockGetSheetsTask(payload, testMode)\n}\n\nexport class GetSheetsTask<P extends GetSheetsPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n        this.async = true\n    }\n\n    public async work(token: string): Promise<P> {\n        let url = `https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}`\n        let headers = { Authorization: `Bearer ${token}` }\n        let opts: RequestInit = { method: \"GET\", cache: \"no-cache\", headers: headers }\n        let response = await fetch(url, opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(\n                JSON.stringify(error),\n                `Failed to get spreadsheet details for spreadsheet: ${this.payload.spreadsheetId}`,\n                response.status === 401\n            )\n        } else {\n            let data: gapi.client.sheets.Spreadsheet = await response.json()\n            this.payload.sheets = (data.sheets) ? data.sheets : []\n        }\n        return this.payload\n    }\n}\n","import { SyncerError } from \"..\"\nimport { BaseTask } from \"./BaseTask\"\nimport { GapiErrorResponse, UpdateRowPayload, SyncerPayload, TestMode, SyncerPayloadType } from \"../../../types\"\nimport { ExtendSheetTask } from \"./ExtendSheetTask\"\n\nexport function createUpdateRowTask<P extends UpdateRowPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new UpdateRowTask(payload)\n        : undefined // new MockUpdateRowTask(payload, testMode) // TODO\n}\n\nexport class UpdateRowTask<P extends UpdateRowPayload> extends BaseTask<P> {\n    constructor(payload: P) { super(payload) }\n\n    public async work(token: string): Promise<P> {\n        let range = `${this.payload.sheetTitle}!A${this.payload.idx + 1}:A${this.payload.idx + 1}`\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}/values/${range}`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let params: Record<string, string> = { valueInputOption: \"RAW\" }\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n        let body = JSON.stringify({ range: range, majorDimension: \"ROWS\", values: [[this.payload.content]] })\n        let opts: RequestInit = { method: \"PUT\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        let data = await response.json()\n        if (!response.ok) {\n            if (data.error.message.includes(\"exceeds grid limits\")) {\n                let extendSheetTask: SyncerPayload = {\n                    type: SyncerPayloadType.EXTEND_SHEET,\n                    spreadsheetId: this.payload.spreadsheetId,\n                    sheetId: this.payload.sheetId\n                }\n                await new ExtendSheetTask(extendSheetTask).work(token)\n                let secondResponse = await fetch(url.toString(), opts)\n                if (!secondResponse.ok) {\n                    let error: GapiErrorResponse = await response.json()\n                    throw new SyncerError(JSON.stringify(error), `Failed to update row: ${range}`, response.status === 401)\n                } else {\n                    return this.payload\n                }\n            }\n            throw new SyncerError(JSON.stringify(data), `Failed to update row: ${range}`, response.status === 401)\n        }\n        return this.payload\n    }\n}\n","import { SyncerError } from \"..\"\nimport { BaseTask } from \"./BaseTask\"\nimport { GapiErrorResponse, DeleteRowPayload, TestMode } from \"../../../types\"\n\nexport function createDeleteRowTask<P extends DeleteRowPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new DeleteRowTask(payload)\n        : undefined // new MockDeleteRowTask(payload, testMode) // TODO\n}\n\nexport class DeleteRowTask<P extends DeleteRowPayload> extends BaseTask<P> {\n    constructor(payload: P) { super(payload) }\n\n    public async work(token: string): Promise<P> {\n        let range = { sheetId: this.payload.sheetId, startRowIndex: this.payload.idx, endRowIndex: this.payload.idx + 1, startColumnIndex: 0 }\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ deleteRange: { range: range, shiftDimension: \"ROWS\" } }] })\n        let opts: RequestInit = { method: \"POST\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), `Failed to delete row: ${this.payload.idx}`, response.status === 401)\n        }\n        return this.payload\n    }\n}","import { SyncerError } from \"..\"\nimport { BaseTask } from \"./BaseTask\"\nimport { GapiErrorResponse, GetSpreadsheetPayload, TestMode } from \"../../../types\"\n\nexport function createGetSpreadsheetTask<P extends GetSpreadsheetPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new GetSpreadsheetTask(payload)\n        : undefined // new MockGetSpreadsheetTask(payload, testMode)\n}\n\nexport class GetSpreadsheetTask<P extends GetSpreadsheetPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n        this.async = true\n    }\n\n    public async work(token: string): Promise<P> {\n        let url = `https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}`\n        let headers = { Authorization: `Bearer ${token}` }\n        let opts: RequestInit = { method: \"GET\", cache: \"no-cache\", headers: headers }\n        let response = await fetch(url, opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(\n                JSON.stringify(error),\n                `Failed to get spreadsheet details for spreadsheet: ${this.payload.spreadsheetId}`,\n                response.status === 401\n            )\n        } else {\n            this.payload.spreadsheet = await response.json()\n        }\n        return this.payload\n    }\n}\n","import { SyncerError } from \".\"\nimport { SyncerPayload, SyncerPayloadType, SyncerState } from \"../../types\"\n\nexport function postSyncStateMessage(length: number, state: SyncerState) {\n    postResponse({\n        length: length,\n        state: state,\n        type: SyncerPayloadType.SYNC_STATE\n    })\n}\n\nexport function postErrorMessage(error: SyncerError) {\n    postResponse({\n        friendlyMsg: error.friendlyMsg,\n        error: error,\n        type: SyncerPayloadType.ERROR\n    })\n}\n\nexport function postTokenRequestMessage() {\n    postMessage({ type: SyncerPayloadType.TOKEN_REQUEST })\n}\n\nfunction postResponse(payload: SyncerPayload) {\n    console.log(\"posting payload:\")\n    console.log(payload)\n    postMessage({payload})\n}\n"],"sourceRoot":""}