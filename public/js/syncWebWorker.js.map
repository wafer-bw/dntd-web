{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/types/syncerResponses.ts","webpack:///./src/mocks/Gapi.ts","webpack:///./src/mocks/syncTasks.ts","webpack:///./src/workers/sync/index.ts","webpack:///./src/types/index.ts","webpack:///./src/workers/sync/syncWebWorker.ts","webpack:///./src/workers/sync/syncTasks.ts","webpack:///./src/workers/sync/typeGuards.ts","webpack:///./src/workers/sync/syncResponses.ts","webpack:///./src/mocks/index.ts","webpack:///./src/types/search.ts","webpack:///./src/types/testing.ts","webpack:///./src/types/syncerTasks.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SyncerResponseType","SyncerState","auth2","MockAuth2","_api","_callback","MockGoogleAuth","_params","MockCurrentUser","MockGoogleUser","expires_in","access_token","isSignedIn","MockIsSignedIn","currentUser","listen","testMode","extendSheetLength","_token","_task","this","TestMode","FAIL_GET_SPREADSHEET_SHEETS","Error","FAIL_GET_RANGE","RETURN_ROWS","FAIL_UPDATE_RANGE","FAIL_DELETE_ROW","syncRate","ms","Promise","resolve","setTimeout","SyncerError","errorMsg","friendlyMsg","needsReAuth","super","queue","paused","token","syncerTasks","sleep","length","task","type","SyncerTaskType","GET_ROWS","postQueueState","DOWNLOADING","postRows","getRows","GET_SHEETS","postSheets","getSheets","UPDATE_ROW","UPLOADING","updateRow","DELETE_ROW","deleteRow","shift","e","instanceOfSyncerError","postReAuthRequest","PAUSED","postError","message","SYNCED","sync","onmessage","msg","data","TEST_MODE_UPDATE","OFF","SyncerTasks","SyncerTasksMock","AUTH_UPDATE","UNPAUSE","push","prequeue","url","spreadsheetId","opts","method","cache","headers","Authorization","response","fetch","ok","json","sheets","error","JSON","stringify","status","range","sheetTitle","values","map","row","idx","URL","params","valueInputOption","keys","forEach","searchParams","append","body","majorDimension","content","toString","includes","extendSheet","sheetId","startRowIndex","endRowIndex","startColumnIndex","requests","deleteRange","shiftDimension","appendDimension","dimension","postResponse","postMessage","SHEETS","rows","ROWS","state","SYNCER_STATE","ERROR","REAUTH","SearchType"],"mappings":"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","file":"syncWebWorker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 53);\n","import { SyncerError } from \"../workers/sync\"\n\nexport type SyncerResponse = (\n    RowsResponse | SheetsResponse | QueueStateResponse | ErrorResponse | ReauthResponse\n)\n\nexport enum SyncerResponseType {\n    ROWS,\n    SHEETS,\n    SYNCER_STATE,\n    ERROR,\n    REAUTH,\n}\n\nexport enum SyncerState {\n    PAUSED = \"cloud_off\",\n    UPLOADING = \"cloud_upload\",\n    DOWNLOADING = \"cloud_download\",\n    SYNCED = \"cloud_done\",\n}\n\nexport interface RowsResponse {\n    type: SyncerResponseType.ROWS\n    spreadsheetId: string\n    sheetId: number\n    rows: string[]\n}\n\nexport interface SheetsResponse {\n    type: SyncerResponseType.SHEETS\n    spreadsheetId: string\n    sheets: gapi.client.sheets.Sheet[]\n}\n\nexport interface QueueStateResponse {\n    type: SyncerResponseType.SYNCER_STATE\n    length: number\n    state: SyncerState\n}\n\nexport interface ErrorResponse {\n    type: SyncerResponseType.ERROR\n    error: SyncerError | Error\n    friendlyMsg: string\n}\n\nexport interface ReauthResponse {\n    type: SyncerResponseType.REAUTH\n}\n","export class MockGapi {\n    public auth2 = new MockAuth2()\n    public load(_api: string, _callback: () => void) {\n        _callback()\n    }\n}\n\nclass MockAuth2 {\n    public getAuthInstance() {\n        return new MockGoogleAuth()\n    }\n    public async init(_params: any) { }\n}\n\nclass MockCurrentUser {\n    public get() { return new MockGoogleUser() }\n}\n\nexport class MockGoogleUser {\n    public getAuthResponse() {\n        return {\n            expires_in: 9999,\n            access_token: \"faketoken\"\n        }\n    }\n    public async reloadAuthResponse() {\n        return {\n            expires_in: 9999,\n            access_token: \"faketoken\"\n        }\n    }\n}\n\nclass MockGoogleAuth {\n    public isSignedIn = new MockIsSignedIn()\n    public signOut() { }\n    public signIn() { }\n    public currentUser = new MockCurrentUser()\n}\n\nclass MockIsSignedIn {\n    public listen = (_callback: any) => { }\n    public get = () => { return true }\n}\n","import {\n    GetRowsTask, UpdateRowTask, DeleteRowTask, GetSheetsTask, TestMode\n} from \"../types\"\n\nexport class SyncerTasksMock {\n\n    public extendSheetLength = 100\n\n    constructor(private testMode: TestMode) { }\n\n    public async getSheets(_token: string, _task: GetSheetsTask) {\n        if (this.testMode === TestMode.FAIL_GET_SPREADSHEET_SHEETS) {\n            throw new Error(\"mock fail\")\n        }\n        return [{\n            \"properties\": {\n                \"sheetId\": 0,\n                \"title\": \"Sheet1\",\n                \"index\": 0,\n                \"sheetType\": \"GRID\",\n                \"gridProperties\": {\n                    \"rowCount\": 100,\n                    \"columnCount\": 26\n                }\n            }\n        },\n        {\n            \"properties\": {\n                \"sheetId\": 1,\n                \"title\": \"Sheet2\",\n                \"index\": 0,\n                \"sheetType\": \"GRID\",\n                \"gridProperties\": {\n                    \"rowCount\": 100,\n                    \"columnCount\": 26\n                }\n            }\n        }]\n    }\n\n    public async getRows(_token: string, _task: GetRowsTask) {\n        if (this.testMode === TestMode.FAIL_GET_RANGE) {\n            throw new Error(\"mock fail\")\n        } else if (this.testMode === TestMode.RETURN_ROWS) {\n            return [\"aaa\", \"bbb\", \"ccc\", \"@tag\", \"@key:value\"]\n        }\n        return []\n    }\n\n    public async updateRow(_token: string, _task: UpdateRowTask) {\n        if (this.testMode === TestMode.FAIL_UPDATE_RANGE) {\n            throw new Error(\"mock fail\")\n        }\n    }\n\n    public async deleteRow(_token: string, _task: DeleteRowTask) {\n        if (this.testMode === TestMode.FAIL_DELETE_ROW) {\n            throw new Error(\"mock fail\")\n        }\n    }\n\n}\n","export * from \"./syncTasks\"\nexport * from \"./typeGuards\"\nexport * from \"./syncWebWorker\"\nexport * from \"./syncResponses\"\n\nexport const syncRate = 250 // ms\n\nexport async function sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport class SyncerError extends Error {\n    constructor(errorMsg: string, public friendlyMsg: string, public needsReAuth: boolean) {\n        super(errorMsg)\n    }\n}\n","export * from \"./caret\"\nexport * from \"./errors\"\nexport * from \"./search\"\nexport * from \"./testing\"\nexport * from \"./syncerTasks\"\nexport * from \"./syncerResponses\"\n","import { SyncerTasksMock } from \"../../mocks\"\nimport { TestMode, SyncerTask, SyncerTaskType, SyncerState } from \"../../types\"\nimport {\n    SyncerTasks, postQueueState, postRows, postSheets, syncRate, sleep, postError,\n    postReAuthRequest, instanceOfSyncerError, SyncerError\n} from \".\"\n\nconst queue: any[] = []\nlet paused: boolean = false\nlet token: string | null = null\nlet syncerTasks: SyncerTasks | SyncerTasksMock | null = null\n\nsync()\nonmessage = (msg) => prequeue(msg)\n\nfunction prequeue(msg: MessageEvent) {\n    let task: SyncerTask = msg.data\n    switch (task.type) {\n        case SyncerTaskType.TEST_MODE_UPDATE:\n            if (task.testMode === TestMode.OFF) {\n                syncerTasks = new SyncerTasks()\n            } else {\n                token = \"mock\"\n                syncerTasks = new SyncerTasksMock(task.testMode)\n            }\n            break\n        case SyncerTaskType.AUTH_UPDATE:\n            token = task.token\n            break\n        case SyncerTaskType.UNPAUSE:\n            paused = false\n            break\n        default:\n            queue.push(task)\n            break\n    }\n}\n\nasync function sync() {\n    while (true) {\n        await sleep(syncRate)\n        while (queue.length > 0 && token && !paused && syncerTasks) {\n            let task: SyncerTask = queue[0]\n            try {\n                switch (task.type) {\n                    case SyncerTaskType.GET_ROWS:\n                        postQueueState(queue.length, SyncerState.DOWNLOADING)\n                        postRows(task, await syncerTasks!.getRows(token!, task))\n                        break\n                    case SyncerTaskType.GET_SHEETS:\n                        postQueueState(queue.length, SyncerState.DOWNLOADING)\n                        postSheets(task, await syncerTasks!.getSheets(token!, task))\n                        break\n                    case SyncerTaskType.UPDATE_ROW:\n                        postQueueState(queue.length, SyncerState.UPLOADING)\n                        await syncerTasks!.updateRow(token!, task)\n                        break\n                    case SyncerTaskType.DELETE_ROW:\n                        postQueueState(queue.length, SyncerState.UPLOADING)\n                        await syncerTasks!.deleteRow(token!, task)\n                        break\n                }\n                queue.shift()\n            } catch (e) {\n                if (instanceOfSyncerError(e) && e.needsReAuth) {\n                    postReAuthRequest()\n                    token = null\n                    break\n                } else {\n                    paused = true\n                    postQueueState(queue.length, SyncerState.PAUSED)\n                    postError((instanceOfSyncerError(e))\n                        ? e\n                        : new SyncerError(e.message, \"Unknown Error\", false))\n                    break\n                }\n            }\n            if (!paused && queue.length === 0) {\n                postQueueState(queue.length, SyncerState.SYNCED)\n            }\n        }\n    }\n}\n","import { SyncerError } from \".\"\nimport {\n    GetRowsTask, UpdateRowTask, DeleteRowTask, GapiErrorResponse, GetSheetsTask\n} from \"../../types\"\n\nexport class SyncerTasks {\n\n    public extendSheetLength = 100\n\n    public async getSheets(token: string, task: GetSheetsTask) {\n        let url = `https://sheets.googleapis.com/v4/spreadsheets/${task.spreadsheetId}`\n        let headers = { Authorization: `Bearer ${token}` }\n        let opts: RequestInit = { method: \"GET\", cache: \"no-cache\", headers: headers }\n        let response = await fetch(url, opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(\n                JSON.stringify(error),\n                `Failed to get spreadsheet details for spreadsheet: ${task.spreadsheetId}`,\n                response.status === 401\n            )\n        } else {\n            let data: gapi.client.sheets.Spreadsheet = await response.json()\n            return data.sheets || []\n        }\n    }\n\n    public async getRows(token: string, task: GetRowsTask) {\n        let range = `${task.sheetTitle}!A:A`\n        let url = `https://sheets.googleapis.com/v4/spreadsheets/${task.spreadsheetId}/values/${range}`\n        let headers = { Authorization: `Bearer ${token}` }\n        let opts: RequestInit = { method: \"GET\", cache: \"no-cache\", headers: headers }\n        let response = await fetch(url, opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(\n                JSON.stringify(error),\n                `Failed to get sheet rows: ${range}`,\n                response.status === 401)\n        } else {\n            let data: gapi.client.sheets.ValueRange = await response.json()\n            let rows: string[] = (data.values) ? data.values.map(row => row[0]) : []\n            return rows\n        }\n    }\n\n    public async updateRow(token: string, task: UpdateRowTask) {\n        let range = `${task.sheetTitle}!A${task.idx + 1}:A${task.idx + 1}`\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${task.spreadsheetId}/values/${range}`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let params: Record<string, string> = { valueInputOption: \"RAW\" }\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n        let body = JSON.stringify({ range: range, majorDimension: \"ROWS\", values: [[task.content]] })\n        let opts: RequestInit = { method: \"PUT\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        let data = await response.json()\n        if (!response.ok) {\n            if (data.error.message.includes(\"exceeds grid limits\")) {\n                await this.extendSheet(token, task.spreadsheetId, task.sheetId)\n                let secondResponse = await fetch(url.toString(), opts)\n                if (!secondResponse.ok) {\n                    let error: GapiErrorResponse = await response.json()\n                    throw new SyncerError(JSON.stringify(error), `Failed to update row: ${range}`, response.status === 401)\n                } else {\n                    return\n                }\n            }\n            throw new SyncerError(JSON.stringify(data), `Failed to update row: ${range}`, response.status === 401)\n        }\n    }\n\n    public async deleteRow(token: string, task: DeleteRowTask) {\n        let range = { sheetId: task.sheetId, startRowIndex: task.idx, endRowIndex: task.idx + 1, startColumnIndex: 0 }\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${task.spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ deleteRange: { range: range, shiftDimension: \"ROWS\" } }] })\n        let opts: RequestInit = { method: \"POST\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), `Failed to delete row: ${task.idx}`, response.status === 401)\n        }\n    }\n\n    private async extendSheet(token: string, spreadsheetId: string, sheetId: number) {\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ appendDimension: { sheetId: sheetId, dimension: \"ROWS\", length: this.extendSheetLength } }] })\n        let opts: RequestInit = { method: \"POST\", mode: \"cors\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), \"Failed to extend sheet\", response.status === 401)\n        }\n    }\n\n}\n","import { SyncerError } from \".\"\n\nexport function instanceOfSyncerError(error: Error | SyncerError): error is SyncerError {\n    return \"needsReAuth\" in error\n}\n","import { SyncerError } from \".\"\nimport { \n    SyncerResponse, SyncerResponseType, GetRowsTask, GetSheetsTask, SyncerState\n} from \"../../types\"\n\nexport function postSheets(task: GetSheetsTask, sheets: gapi.client.sheets.Sheet[]) {\n    postResponse({\n        spreadsheetId: task.spreadsheetId,\n        sheets: sheets,\n        type: SyncerResponseType.SHEETS\n    })\n}\n\nexport function postRows(task: GetRowsTask, rows: string[]) {\n    postResponse({\n        spreadsheetId: task.spreadsheetId,\n        sheetId: task.sheetId,\n        rows: rows,\n        type: SyncerResponseType.ROWS\n    })\n}\n\nexport function postQueueState(length: number, state: SyncerState) {\n    postResponse({\n        length: length,\n        state: state,\n        type: SyncerResponseType.SYNCER_STATE\n    })\n}\n\nexport function postError(error: SyncerError) {\n    postResponse({\n        friendlyMsg: error.friendlyMsg,\n        error: error,\n        type: SyncerResponseType.ERROR\n    })\n}\n\nexport function postReAuthRequest() {\n    postMessage({ type: SyncerResponseType.REAUTH })\n}\n\nfunction postResponse(response: SyncerResponse) {\n    postMessage(response)\n}\n","export * from \"./Gapi\"\nexport * from \"./syncTasks\"\n","export enum SearchType {\n    NONE,\n    AND,\n    OR,\n}\n","export enum TestMode {\n    OFF = \"0\",\n    WORKING = \"1\",\n    FAIL_GET_SPREADSHEET_SHEETS = \"2\",\n    FAIL_GET_RANGE = \"3\",\n    FAIL_UPDATE_RANGE = \"4\",\n    FAIL_DELETE_ROW = \"5\",\n    RETURN_ROWS = \"6\",\n    DEMO = \"7\"\n}\n","import { TestMode } from \"./testing\"\n\nexport type SyncerTask = (\n    AuthUpdateTask | DeleteRowTask | UpdateRowTask | GetRowsTask |\n    GetSheetsTask | TestModeUpdateTask | UnpauseTask\n)\n\nexport enum SyncerTaskType {\n    AUTH_UPDATE,\n    DELETE_ROW,\n    UPDATE_ROW,\n    GET_ROWS,\n    GET_SHEETS,\n    TEST_MODE_UPDATE,\n    UNPAUSE\n}\n\nexport interface GetSheetsTask {\n    type: SyncerTaskType.GET_SHEETS\n    spreadsheetId: string\n}\n\nexport interface TestModeUpdateTask {\n    type: SyncerTaskType.TEST_MODE_UPDATE\n    testMode: TestMode\n}\n\nexport interface AuthUpdateTask {\n    type: SyncerTaskType.AUTH_UPDATE\n    token: string\n}\n\nexport interface DeleteRowTask {\n    type: SyncerTaskType.DELETE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n}\n\nexport interface UpdateRowTask {\n    type: SyncerTaskType.UPDATE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n    sheetTitle: string\n    content: string\n}\n\nexport interface GetRowsTask {\n    type: SyncerTaskType.GET_ROWS\n    spreadsheetId: string\n    sheetId: number\n    sheetTitle: string\n}\n\nexport interface UnpauseTask {\n    type: SyncerTaskType.UNPAUSE\n}\n"],"sourceRoot":""}