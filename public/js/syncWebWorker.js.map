{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/types/index.ts","webpack:///./src/workers/sync/tasks/BaseTask.ts","webpack:///./src/types/search.ts","webpack:///./src/types/testing.ts","webpack:///./src/types/syncer.ts","webpack:///./src/errors/index.ts","webpack:///./src/errors/SyncerError.ts","webpack:///./src/errors/FriendlyError.ts","webpack:///./src/workers/sync/tasks/index.ts","webpack:///./src/workers/sync/tasks/ExtendSheetTask.ts","webpack:///./src/workers/sync/syncWebWorker.ts","webpack:///./src/workers/sync/index.ts","webpack:///./src/workers/sync/typeGuards.ts","webpack:///./src/workers/sync/tasks/GetRowsTask.ts","webpack:///./src/workers/sync/tasks/CreateRowTask.ts","webpack:///./src/workers/sync/tasks/UpdateRowTask.ts","webpack:///./src/workers/sync/tasks/DeleteRowTask.ts","webpack:///./src/workers/sync/tasks/GetSpreadsheetTask.ts","webpack:///./src/workers/sync/messages.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","payload","testMode","type","SyncerPayloadType","CREATE_ROW","createCreateRowTask","GET_ROWS","createGetRowsTask","GET_SPREADSHEET","createGetSpreadsheetTask","UPDATE_ROW","createUpdateRowTask","DELETE_ROW","createDeleteRowTask","console","warn","TestMode","OFF","this","undefined","SearchType","str","values","includes","SyncerResponseType","SyncerState","SyncerError","Error","errorMsg","friendlyMsg","needsReAuth","pause","super","error","ERROR","rejects","FriendlyError","msg","ExtendSheetTask","BaseTask","token","url","URL","spreadsheetId","opts","method","cache","headers","Authorization","body","JSON","stringify","requests","appendDimension","sheetId","dimension","length","response","fetch","toString","ok","json","status","pendingDownloads","taskFactory","TaskFactory","state","SYNCED","downloadQueue","Map","uploadQueue","isSynced","PAUSED","size","updateSyncState","newState","postSyncStateMessage","handleSyncError","id","syncerError","instanceOfSyncerError","message","postTokenRequestMessage","postMessage","workUploadQueueTasks","UPLOADING","task","work","shift","workDownloadQueueTasks","DOWNLOADING","entries","delete","then","catch","finally","sleep","ms","Promise","resolve","setTimeout","sync","onmessage","data","TEST_MODE_UPDATE","AUTH_UPDATE","UNPAUSE","createTask","async","set","push","prequeue","GetRowsTask","MockGetRowsTask","range","sheetTitle","rows","map","row","_token","FAIL_GET_RANGE","RETURN_ROWS","CreateRowTask","MockCreateRowTask","startIndex","idx","endIndex","insertDimension","FAIL_DELETE_ROW","UpdateRowTask","MockUpdateRowTask","params","valueInputOption","keys","forEach","searchParams","append","majorDimension","content","extendSheetTask","EXTEND_SHEET","FAIL_UPDATE_RANGE","DeleteRowTask","MockDeleteRowTask","startRowIndex","endRowIndex","startColumnIndex","deleteRange","shiftDimension","GetSpreadsheetTask","MockGetSpreadsheetTask","spreadsheet","FAIL_GET_SPREADSHEET_SHEETS","SYNC_STATE","TOKEN_REQUEST"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,I,gJCjFrD,QACA,QACA,U,+ECHA,aACA,QAKA,oBACW,WAAWC,EAAwBC,GACtC,OAAOD,EAAQE,MACX,KAAK,EAAAC,kBAAkBC,WACnB,OAAO,EAAAC,oBAAoBL,EAASC,GACxC,KAAK,EAAAE,kBAAkBG,SACnB,OAAO,EAAAC,kBAAkBP,EAASC,GACtC,KAAK,EAAAE,kBAAkBK,gBACnB,OAAO,EAAAC,yBAAyBT,EAASC,GAC7C,KAAK,EAAAE,kBAAkBO,WACnB,OAAO,EAAAC,oBAAoBX,EAASC,GACxC,KAAK,EAAAE,kBAAkBS,WACnB,OAAO,EAAAC,oBAAoBb,EAASC,GAIxC,QAEI,YADAa,QAAQC,KAAK,kDAQ7B,iBAKI,YAAYf,EAAYC,GAFjB,KAAAA,SAAqB,EAAAe,SAASC,IAGjCC,KAAKlB,QAAUA,EACfkB,KAAKjB,cAAyBkB,IAAblB,EAA0BA,EAAWiB,KAAKjB,Y,iFCtCnE,SAAYmB,GACR,mBACA,iBACA,eAHJ,CAAY,EAAAA,aAAA,EAAAA,WAAU,M,6BCAtB,IAAYJ,E,iDAAZ,SAAYA,GACR,UACA,cACA,kCACA,qBACA,wBACA,sBACA,kBACA,kBARJ,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAWpB,8BAAmCK,GAC/B,OAAc3C,OAAQ4C,OAAON,GAAUO,SAASF,K,8ECHpD,SAAYlB,GACR,iCACA,+BACA,+BACA,2BACA,2CACA,yBACA,yCACA,mCACA,+BACA,2BACA,sBACA,sCACA,gCAbJ,CAAY,EAAAA,oBAAA,EAAAA,kBAAiB,KAgB7B,SAAYqB,GACR,mCACA,qBACA,uBAHJ,CAAY,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,SAAYC,GACR,qBACA,2BACA,+BACA,sBACA,6BALJ,CAAY,EAAAA,cAAA,EAAAA,YAAW,M,4IC9BvB,SACA,U,8ECFA,aAEA,MAAaC,UAAoBC,MAG7B,YAAYC,EAAyBC,EAA4BC,EAAsBC,GACnFC,MAAMJ,GAD2B,KAAAC,cAA4B,KAAAC,cAE7DZ,KAAKlB,QAAU,CACX+B,WAAkBZ,IAAVY,GAAuBA,EAC/BE,MAAOf,KACPW,YAAaX,KAAKW,YAClB3B,KAAM,EAAAC,kBAAkB+B,MACxBC,SAAS,IAVrB,iB,8ECFA,MAAaC,UAAsBT,MAI/B,YAAYC,EAAkBC,GAC1BG,MAAMJ,GACNV,KAAKmB,IAAMT,EACXV,KAAKW,YAAcA,GAP3B,mB,gJCAA,QACA,SACA,SACA,SACA,SAEA,SACA,U,8YCPA,aAEA,QAEA,MAAaS,UAAsD,EAAAC,SAC/D,YAAYvC,GACRgC,MAAMhC,GAGG,KAAKwC,G,yCACd,IACIC,EAAM,IAAIC,IAAI,iDAAiDxB,KAAKlB,QAAQ2C,6BAG5EC,EAAoB,CAAEC,OAAQ,OAAQ1D,KAAM,OAAQ2D,MAAO,WAAYC,QAF7D,CAAEC,cAAe,UAAUR,GAEoDS,KADlFC,KAAKC,UAAU,CAAEC,SAAU,CAAC,CAAEC,gBAAiB,CAAEC,QAASpC,KAAKlB,QAAQsD,QAASC,UAAW,OAAQC,OAHtF,UAKpBC,QAAiBC,MAAMjB,EAAIkB,WAAYf,GAC3C,IAAKa,EAASG,GAAI,CACd,IAAI3B,QAAiCwB,EAASI,OAC9C,MAAM,IAAI,EAAAnC,YAAYwB,KAAKC,UAAUlB,GAAQ,gCAAqD,MAApBwB,EAASK,QAE3F,OAAO5C,KAAKlB,YAhBpB,qB,ubCJA,cACA,QACA,QACA,QACA,OAEA,IAAI+D,EAAmB,EAEvB,IAAI9D,EAAqB,EAAAe,SAASC,IAClC,MAAM+C,EAAc,IAAI,EAAAC,YACxB,IAAIzB,OAA4BrB,EAC5B+C,EAAqB,EAAAzC,YAAY0C,OACrC,MAAMC,EAAsD,IAAIC,IAC1DC,EAA+D,GAwCrE,SAASC,IACL,OACIL,IAAU,EAAAzC,YAAY+C,QACtBN,IAAU,EAAAzC,YAAY0C,QACtBG,EAAYd,OAASY,EAAcK,KAAOV,IAAqB,EAOvE,SAASW,EAAgBC,QACJxD,IAAbwD,GAA0BT,IAAUS,IACpCT,EAAQS,EACR,EAAAC,qBAAqBN,EAAYd,OAAQU,IAIjD,SAASW,EAAgB5C,EAA4B6C,GACjD,IAAIC,EAA4B,EAAAC,sBAAsB/C,GAChDA,EACA,IAAI,EAAAP,YAAYO,EAAMgD,QAAS,iBAAiB,GAEtD,GAAIF,EAAYjD,YAGZ,OAFA,EAAAoD,+BACA1C,OAAQrB,GAGJ4D,EAAY/E,QAAQ+B,OAAO2C,EAAgB,EAAAjD,YAAY+C,QAC3DW,YAAY,CAAEL,KAAI7C,MAAO8C,EAAY/E,UAI7C,SAAeoF,I,yCACX,KAA8B,IAAvBd,EAAYd,QAAgBhB,GAAS0B,IAAU,EAAAzC,YAAY+C,QAAQ,CACtEE,EAAgB,EAAAjD,YAAY4D,WAC5B,IAAI,GAAEP,EAAE,KAAEQ,GAAShB,EAAY,GAC/B,IACI,IAAItE,QAAgBsF,EAAKC,KAAK/C,GAC9B2C,YAAY,CAAEL,KAAI9E,YAClBsE,EAAYkB,QACd,MAAOvD,GACL4C,EAAgB5C,EAAO6C,QAKnC,SAASW,IACL,GAA2B,IAAvBrB,EAAcK,MAAejC,GAAS0B,IAAU,EAAAzC,YAAY+C,OAAhE,CACAE,EAAgB,EAAAjD,YAAYiE,aAC5B,IAAK,IAAKZ,EAAIQ,KAASlB,EAAcuB,UACjC5B,GAAoB,EACpBK,EAAcwB,OAAOd,GACrBQ,EAAKC,KAAK/C,GACLqD,KAAM7F,GAA2BmF,YAAY,CAAEL,KAAI9E,aACnD8F,MAAO7D,GAAuB4C,EAAgB5C,EAAO6C,IACrDiB,QAAQ,IAAMhC,GAAoB,IAI/C,SAASiC,EAAMC,GACX,OAAO,IAAIC,QAAQC,GAAWC,WAAWD,EAASF,KAtEtD,W,kCACI,aACUD,EAvCG,KAwCLzB,KAAYG,EAAgB,EAAAjD,YAAY0C,QAC5CsB,UACML,OAlCdiB,GACAC,UAAajE,GAEb,SAAkBA,GACd,MAAM,GAAEyC,EAAE,QAAE9E,GAAoDqC,EAAIkE,KAEpE,OAAQvG,EAAQE,MACZ,KAAK,EAAAC,kBAAkBqG,iBAGnB,OAFAvG,EAAWD,EAAQC,cACfA,IAAa,EAAAe,SAASC,MAAKuB,EAAQ,SAE3C,KAAK,EAAArC,kBAAkBsG,YAEnB,YADAjE,EAAQxC,EAAQwC,OAEpB,KAAK,EAAArC,kBAAkBuG,QAEnB,YADAhC,EAAgB,EAAAjD,YAAY4D,WAIpC,IAAIC,EAAOtB,EAAY2C,WAAW3G,EAASC,GAC3C,QAAakB,IAATmE,EAAoB,OAEpBA,EAAKsB,MACLxC,EAAcyC,IAAI/B,EAAIQ,GAEtBhB,EAAYwC,KAAK,CAAEhC,KAAIQ,SAxBVyB,CAAS1E,I,0IChB9B,S,8ECEA,iCAAsCJ,GAClC,MAAO,gBAAiBA,I,8YCH5B,aACA,OACA,QAEA,6BAA4DjC,EAAYC,GACpE,OAAQA,IAAa,EAAAe,SAASC,IACxB,IAAI+F,EAAYhH,GAChB,IAAIiH,EAAgBjH,EAASC,IAGvC,MAAa+G,UAA8C,EAAAzE,SACvD,YAAYvC,GACRgC,MAAMhC,GACNkB,KAAK0F,OAAQ,EAGJ,KAAKpE,G,yCACd,IAAI0E,EAAWhG,KAAKlB,QAAQmH,WAAhB,OACR1E,EAAM,iDAAiDvB,KAAKlB,QAAQ2C,wBAAwBuE,IAE5FtE,EAAoB,CAAEC,OAAQ,MAAOC,MAAO,WAAYC,QAD9C,CAAEC,cAAe,UAAUR,IAErCiB,QAAiBC,MAAMjB,EAAKG,GAChC,IAAKa,EAASG,GAAI,CACd,IAAI3B,QAAiCwB,EAASI,OAC9C,MAAM,IAAI,EAAAnC,YACNwB,KAAKC,UAAUlB,GACf,+BAA+Bf,KAAKlB,QAAQ2C,cACxB,MAApBc,EAASK,QACV,CACH,IAAIyC,QAA4C9C,EAASI,OACzD3C,KAAKlB,QAAQoH,KAAQb,EAAW,OAAIA,EAAKjF,OAAO+F,IAAIC,GAAOA,EAAI,IAAM,GAEzE,OAAOpG,KAAKlB,YAtBpB,gBA0BA,MAAaiH,UAAkD,EAAA1E,SAC3D,YAAYvC,EAAYC,GACpB+B,MAAMhC,EAASC,GACfiB,KAAK0F,OAAQ,EAGJ,KAAKW,G,yCACd,GAAIrG,KAAKjB,WAAa,EAAAe,SAASwG,eAC3B,MAAM,IAAI7F,MAAM,aAKpB,OAHIT,KAAKjB,WAAa,EAAAe,SAASyG,cAC3BvG,KAAKlB,QAAQoH,KAAO,CAAC,MAAO,MAAO,MAAO,OAAQ,eAE/ClG,KAAKlB,YAbpB,qB,8YCpCA,aACA,OACA,QAEA,+BAAgEA,EAAYC,GACxE,OAAQA,IAAa,EAAAe,SAASC,IACxB,IAAIyG,EAAc1H,GAClB,IAAI2H,EAAkB3H,EAASC,IAGzC,MAAayH,UAAkD,EAAAnF,SAC3D,YAAYvC,GACRgC,MAAMhC,GAGG,KAAKwC,G,yCACd,IAAI0E,EAAQ,CAAE5D,QAASpC,KAAKlB,QAAQsD,QAASsE,WAAY1G,KAAKlB,QAAQ6H,IAAKC,SAAU5G,KAAKlB,QAAQ6H,IAAM,EAAGtE,UAAW,QAClHd,EAAM,IAAIC,IAAI,iDAAiDxB,KAAKlB,QAAQ2C,6BAG5EC,EAAoB,CAAEC,OAAQ,OAAQC,MAAO,WAAYC,QAF/C,CAAEC,cAAe,UAAUR,GAEsCS,KADpEC,KAAKC,UAAU,CAAEC,SAAU,CAAC,CAAE2E,gBAAiB,CAAEb,MAAOA,QAE/DzD,QAAiBC,MAAMjB,EAAIkB,WAAYf,GAC3C,IAAKa,EAASG,GAAI,CACd,IAAI3B,QAAiCwB,EAASI,OAC9C,MAAM,IAAI,EAAAnC,YAAYwB,KAAKC,UAAUlB,GAAQ,6BAAkD,MAApBwB,EAASK,QAExF,OAAO5C,KAAKlB,YAhBpB,kBAoBA,MAAa2H,UAAsD,EAAApF,SAC/D,YAAYvC,EAAYC,GACpB+B,MAAMhC,EAASC,GAGN,KAAKsH,G,yCACd,GAAIrG,KAAKjB,WAAa,EAAAe,SAASgH,gBAC3B,MAAM,IAAIrG,MAAM,aAEpB,OAAOT,KAAKlB,YATpB,uB,8YC9BA,aACA,QACA,QACA,OAEA,+BAAgEA,EAAYC,GACxE,OAAQA,IAAa,EAAAe,SAASC,IACxB,IAAIgH,EAAcjI,GAClB,IAAIkI,EAAkBlI,EAASC,IAGzC,MAAagI,UAAkD,EAAA1F,SAC3D,YAAYvC,GACRgC,MAAMhC,GAGG,KAAKwC,G,yCACd,IAAI0E,EAAQ,GAAGhG,KAAKlB,QAAQmH,eAAejG,KAAKlB,QAAQ6H,IAAM,MAAM3G,KAAKlB,QAAQ6H,IAAM,IACnFpF,EAAM,IAAIC,IAAI,iDAAiDxB,KAAKlB,QAAQ2C,wBAAwBuE,KACpGnE,EAAU,CAAEC,cAAe,UAAUR,GACrC2F,EAAiC,CAAEC,iBAAkB,OACzD1J,OAAO2J,KAAKF,GAAQG,QAAQ/I,GAAOkD,EAAI8F,aAAaC,OAAOjJ,EAAK4I,EAAO5I,KACvE,IACIqD,EAAoB,CAAEC,OAAQ,MAAOC,MAAO,WAAYC,QAASA,EAASE,KADnEC,KAAKC,UAAU,CAAE+D,MAAOA,EAAOuB,eAAgB,OAAQnH,OAAQ,CAAC,CAACJ,KAAKlB,QAAQ0I,aAErFjF,QAAiBC,MAAMjB,EAAIkB,WAAYf,GACvC2D,QAAa9C,EAASI,OAC1B,IAAKJ,EAASG,GAAI,CACd,GAAI2C,EAAKtE,MAAMgD,QAAQ1D,SAAS,uBAAwB,CACpD,IAAIoH,EAAiC,CACjCzI,KAAM,EAAAC,kBAAkByI,aACxBjG,cAAezB,KAAKlB,QAAQ2C,cAC5BW,QAASpC,KAAKlB,QAAQsD,QACtBnB,SAAS,GAIb,SAFM,IAAI,EAAAG,gBAAgBqG,GAAiBpD,KAAK/C,UACrBkB,MAAMjB,EAAIkB,WAAYf,IAC7BgB,GAIhB,OAAO1C,KAAKlB,QAJQ,CACpB,IAAIiC,QAAiCwB,EAASI,OAC9C,MAAM,IAAI,EAAAnC,YAAYwB,KAAKC,UAAUlB,GAAQ,yBAAyBiF,EAA6B,MAApBzD,EAASK,SAKhG,MAAM,IAAI,EAAApC,YAAYwB,KAAKC,UAAUoD,GAAO,0BAA+C,MAApB9C,EAASK,QAEpF,OAAO5C,KAAKlB,YAlCpB,kBAsCA,MAAakI,UAAsD,EAAA3F,SAC/D,YAAYvC,EAAYC,GACpB+B,MAAMhC,EAASC,GAGN,O,yCACT,GAAIiB,KAAKjB,WAAa,EAAAe,SAAS6H,kBAC3B,MAAM,IAAIlH,MAAM,aAEpB,OAAOT,KAAKlB,YATpB,uB,8YCjDA,aACA,OACA,QAEA,+BAAgEA,EAAYC,GACxE,OAAQA,IAAa,EAAAe,SAASC,IACxB,IAAI6H,EAAc9I,GAClB,IAAI+I,EAAkB/I,EAASC,IAGzC,MAAa6I,UAAkD,EAAAvG,SAC3D,YAAYvC,GACRgC,MAAMhC,GAGG,KAAKwC,G,yCACd,IAAI0E,EAAQ,CAAE5D,QAASpC,KAAKlB,QAAQsD,QAAS0F,cAAe9H,KAAKlB,QAAQ6H,IAAKoB,YAAa/H,KAAKlB,QAAQ6H,IAAM,EAAGqB,iBAAkB,GAC/HzG,EAAM,IAAIC,IAAI,iDAAiDxB,KAAKlB,QAAQ2C,6BAG5EC,EAAoB,CAAEC,OAAQ,OAAQC,MAAO,WAAYC,QAF/C,CAAEC,cAAe,UAAUR,GAEsCS,KADpEC,KAAKC,UAAU,CAAEC,SAAU,CAAC,CAAE+F,YAAa,CAAEjC,MAAOA,EAAOkC,eAAgB,aAElF3F,QAAiBC,MAAMjB,EAAIkB,WAAYf,GAC3C,IAAKa,EAASG,GAAI,CACd,IAAI3B,QAAiCwB,EAASI,OAC9C,MAAM,IAAI,EAAAnC,YAAYwB,KAAKC,UAAUlB,GAAQ,yBAA8C,MAApBwB,EAASK,QAEpF,OAAO5C,KAAKlB,YAhBpB,kBAoBA,MAAa+I,UAAsD,EAAAxG,SAC/D,YAAYvC,EAAYC,GACpB+B,MAAMhC,EAASC,GAGN,KAAKsH,G,yCACd,GAAIrG,KAAKjB,WAAa,EAAAe,SAASgH,gBAC3B,MAAM,IAAIrG,MAAM,aAEpB,OAAOT,KAAKlB,YATpB,uB,8YC9BA,aACA,OACA,QAEA,oCAA0EA,EAAYC,GAClF,OAAQA,IAAa,EAAAe,SAASC,IACxB,IAAIoI,EAAmBrJ,GACvB,IAAIsJ,EAAuBtJ,EAASC,IAG9C,MAAaoJ,UAA4D,EAAA9G,SACrE,YAAYvC,GACRgC,MAAMhC,GACNkB,KAAK0F,OAAQ,EAGJ,KAAKpE,G,yCACd,IAAIC,EAAM,iDAAiDvB,KAAKlB,QAAQ2C,cAEpEC,EAAoB,CAAEC,OAAQ,MAAOC,MAAO,WAAYC,QAD9C,CAAEC,cAAe,UAAUR,IAErCiB,QAAiBC,MAAMjB,EAAKG,GAChC,IAAKa,EAASG,GAAI,CACd,IAAI3B,QAAiCwB,EAASI,OAC9C,MAAM,IAAI,EAAAnC,YACNwB,KAAKC,UAAUlB,GACf,6CAA6Cf,KAAKlB,QAAQ2C,cACtC,MAApBc,EAASK,QACT,GAKR,OAFI5C,KAAKlB,QAAQuJ,kBAAoB9F,EAASI,OAEvC3C,KAAKlB,YAtBpB,uBA0BA,MAAasJ,UAAgE,EAAA/G,SACzE,YAAYvC,EAAYC,GACpB+B,MAAMhC,EAASC,GACfiB,KAAK0F,OAAQ,EAGJ,KAAKW,G,yCACd,GAAIrG,KAAKjB,WAAa,EAAAe,SAASwI,4BAC3B,MAAM,IAAI7H,MAAM,aA6BpB,OA3BAT,KAAKlB,QAAQuJ,YAAc,CACvB,cAAiBrI,KAAKlB,QAAQ2C,cAC9B,eAAkB,0CAA0CzB,KAAKlB,QAAQ2C,qBACzE,WAAc,CACV,MAAS,gBAEb,OAAU,CACN,CACI,WAAc,CACV,QAAW,EACX,MAAS,WAGjB,CACI,WAAc,CACV,QAAW,WACX,MAAS,WAGjB,CACI,WAAc,CACV,QAAW,WACX,MAAS,aAKlBzB,KAAKlB,YArCpB,4B,8ECpCA,aAEA,gCAAqCwD,EAAgBU,GAarD,IAAsBlE,IAZL,CACTwD,OAAQA,EACRU,MAAOA,EACPhE,KAAM,EAAAC,kBAAkBsJ,WACxBtH,SAAS,GASbgD,YAAY,CAACnF,aALjB,qCACImF,YAAY,CAAEjF,KAAM,EAAAC,kBAAkBuJ","file":"syncWebWorker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 61);\n","export * from \"./caret\"\nexport * from \"./search\"\nexport * from \"./testing\"\nexport * from \"./syncer\"\n","import { SyncerPayload, TestMode, SyncerPayloadType } from \"../../../types\"\nimport {\n    createGetRowsTask, createGetSpreadsheetTask, createDeleteRowTask,\n    createUpdateRowTask, createCreateRowTask\n} from \".\"\n\nexport class TaskFactory {\n    public createTask(payload: SyncerPayload, testMode: TestMode): BaseTask<SyncerPayload> | undefined {\n        switch(payload.type) {\n            case SyncerPayloadType.CREATE_ROW:\n                return createCreateRowTask(payload, testMode)\n            case SyncerPayloadType.GET_ROWS:\n                return createGetRowsTask(payload, testMode)\n            case SyncerPayloadType.GET_SPREADSHEET:\n                return createGetSpreadsheetTask(payload, testMode)\n            case SyncerPayloadType.UPDATE_ROW:\n                return createUpdateRowTask(payload, testMode)\n            case SyncerPayloadType.DELETE_ROW:\n                return createDeleteRowTask(payload, testMode)\n            // TODO - NICE TO HAVE\n            // case SyncerPayloadType.MOVE_ROW:\n            //     return undefined\n            default:\n                console.warn(\"Task factory told to build unsupported task\")\n                return undefined\n        }\n        return\n    }\n\n}\n\nexport abstract class BaseTask<P extends SyncerPayload> {\n    public payload: P\n    public async: boolean | undefined\n    public testMode: TestMode = TestMode.OFF\n\n    constructor(payload: P, testMode?: TestMode) {\n        this.payload = payload\n        this.testMode = (testMode !== undefined) ? testMode : this.testMode\n    }\n\n    public abstract work(token: string): Promise<P>\n}\n","export enum SearchType {\n    NONE,\n    AND,\n    OR,\n}\n","export enum TestMode {\n    OFF = \"0\",\n    WORKING = \"1\",\n    FAIL_GET_SPREADSHEET_SHEETS = \"2\",\n    FAIL_GET_RANGE = \"3\",\n    FAIL_UPDATE_RANGE = \"4\",\n    FAIL_DELETE_ROW = \"5\",\n    RETURN_ROWS = \"6\",\n    DEMO = \"demomode\"\n}\n\nexport function instanceOfTestMode(str: string): str is TestMode {\n    return ((<any>Object).values(TestMode).includes(str))\n}\n","import { TestMode } from \"./testing\"\n\nexport type SyncerPayload = (\n    GetRowsPayload | GetSpreadsheetPayload | UpdateRowPayload |\n    ExtendSheetPayload | DeleteRowPayload | TestModeUpdatePayload |\n    AuthUpdatePayload | UnpausePayload | SyncStatePayload | ErrorPayload |\n    TokenRequestPayload | CreateRowPayload\n)\n\nexport enum SyncerPayloadType {\n    AUTH_UPDATE,\n    DELETE_ROW,\n    UPDATE_ROW,\n    GET_ROWS,\n    TEST_MODE_UPDATE,\n    UNPAUSE,\n    GET_SPREADSHEET,\n    EXTEND_SHEET,\n    CREATE_ROW,\n    MOVE_ROW,\n    ERROR,\n    TOKEN_REQUEST,\n    SYNC_STATE,\n}\n\nexport enum SyncerResponseType {\n    SYNCER_STATE,\n    ERROR,\n    REAUTH,\n}\n\nexport enum SyncerState {\n    PAUSED = \"cloud_off\",\n    UPLOADING = \"cloud_upload\",\n    DOWNLOADING = \"cloud_download\",\n    SYNCED = \"cloud_done\",\n    INITIALIZING = \"cloud_queue\",\n}\n\nexport interface TestModeUpdatePayload {\n    type: SyncerPayloadType.TEST_MODE_UPDATE\n    testMode: TestMode\n    rejects: boolean\n}\n\nexport interface AuthUpdatePayload {\n    type: SyncerPayloadType.AUTH_UPDATE\n    token: string\n    rejects: boolean\n}\n\nexport interface UnpausePayload {\n    type: SyncerPayloadType.UNPAUSE\n    rejects: boolean\n}\n\nexport interface DeleteRowPayload {\n    type: SyncerPayloadType.DELETE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n    rejects: boolean\n}\n\nexport interface CreateRowPayload {\n    type: SyncerPayloadType.CREATE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n    rejects: boolean\n}\n\nexport interface ExtendSheetPayload {\n    type: SyncerPayloadType.EXTEND_SHEET\n    spreadsheetId: string\n    sheetId: number\n    rejects: boolean\n}\n\nexport interface UpdateRowPayload {\n    type: SyncerPayloadType.UPDATE_ROW\n    idx: number\n    spreadsheetId: string\n    sheetId: number\n    sheetTitle: string\n    content: string\n    rejects: boolean\n}\n\nexport interface GetSpreadsheetPayload {\n    type: SyncerPayloadType.GET_SPREADSHEET\n    spreadsheetId: string\n    spreadsheet?: gapi.client.sheets.Spreadsheet\n    rejects: boolean\n}\n\nexport interface GetRowsPayload {\n    type: SyncerPayloadType.GET_ROWS\n    spreadsheetId: string\n    sheetId: number\n    sheetTitle: string\n    rows: string[]\n    rejects: boolean\n}\n\nexport interface SyncStatePayload {\n    type: SyncerPayloadType.SYNC_STATE\n    length: number\n    state: SyncerState\n    rejects: boolean\n}\n\nexport interface ErrorPayload {\n    type: SyncerPayloadType.ERROR\n    error: Error\n    pause: boolean\n    friendlyMsg: string\n    rejects: boolean\n}\n\nexport interface TokenRequestPayload {\n    type: SyncerPayloadType.TOKEN_REQUEST\n    rejects: boolean\n}\n","export * from \"./GapiErrors\"\nexport * from \"./SyncerError\"\nexport * from \"./FriendlyError\"\n","import { ErrorPayload, SyncerPayloadType } from \"../types\"\r\n\r\nexport class SyncerError extends Error {\r\n    public payload: ErrorPayload\r\n\r\n    constructor(errorMsg: string, public friendlyMsg: string, public needsReAuth: boolean, pause?: boolean) {\r\n        super(errorMsg)\r\n        this.payload = {\r\n            pause: (pause !== undefined) ? pause : true,\r\n            error: this,\r\n            friendlyMsg: this.friendlyMsg,\r\n            type: SyncerPayloadType.ERROR,\r\n            rejects: false,\r\n        }\r\n    }\r\n}\r\n","export class FriendlyError extends Error {\n    public msg: string\n    public friendlyMsg: string\n\n    constructor(errorMsg: string, friendlyMsg: string) {\n        super(errorMsg)\n        this.msg = errorMsg\n        this.friendlyMsg = friendlyMsg\n    }\n}\n","export * from \"./BaseTask\"\nexport * from \"./GetRowsTask\"\nexport * from \"./CreateRowTask\"\nexport * from \"./UpdateRowTask\"\nexport * from \"./DeleteRowTask\"\n// export * from \"./MoveRowTask\"\nexport * from \"./ExtendSheetTask\"\nexport * from \"./GetSpreadsheetTask\"","import { BaseTask } from \"./BaseTask\"\nimport { ExtendSheetPayload } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport class ExtendSheetTask<P extends ExtendSheetPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n    }\n\n    public async work(token: string): Promise<P> {\n        let extendSheetLength = 100\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ appendDimension: { sheetId: this.payload.sheetId, dimension: \"ROWS\", length: extendSheetLength } }] })\n        let opts: RequestInit = { method: \"POST\", mode: \"cors\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), \"Failed to extend Google Sheet\", response.status === 401)\n        }\n        return this.payload\n    }\n}\n","import { instanceOfSyncerError } from \".\"\nimport { SyncerError } from \"../../errors\"\nimport { TaskFactory, BaseTask } from \"./tasks\"\nimport { postTokenRequestMessage, postSyncStateMessage } from \"./messages\"\nimport { SyncerState, SyncerPayload, TestMode, SyncerPayloadType } from \"../../types\"\n\nlet pendingDownloads = 0\nconst syncRate = 250 // ms\nlet testMode: TestMode = TestMode.OFF\nconst taskFactory = new TaskFactory()\nlet token: string | undefined = undefined\nlet state: SyncerState = SyncerState.SYNCED\nconst downloadQueue: Map<string, BaseTask<SyncerPayload>> = new Map()\nconst uploadQueue: { id: string, task: BaseTask<SyncerPayload> }[] = []\n\nsync()\nonmessage = (msg) => prequeue(msg)\n\nfunction prequeue(msg: MessageEvent) {\n    const { id, payload }: { id: string, payload: SyncerPayload } = msg.data\n\n    switch (payload.type) {\n        case SyncerPayloadType.TEST_MODE_UPDATE:\n            testMode = payload.testMode\n            if (testMode !== TestMode.OFF) token = \"mock\"\n            return\n        case SyncerPayloadType.AUTH_UPDATE:\n            token = payload.token\n            return\n        case SyncerPayloadType.UNPAUSE:\n            updateSyncState(SyncerState.UPLOADING)\n            return\n    }\n\n    let task = taskFactory.createTask(payload, testMode)\n    if (task === undefined) return\n\n    if (task.async) {\n        downloadQueue.set(id, task)\n    } else {\n        uploadQueue.push({ id, task })\n    }\n}\n\nasync function sync() {\n    while (true) {\n        await sleep(syncRate)\n        if (isSynced()) updateSyncState(SyncerState.SYNCED)\n        workDownloadQueueTasks()\n        await workUploadQueueTasks()\n    }\n}\n\nfunction isSynced() {\n    if (\n        state !== SyncerState.PAUSED &&\n        state !== SyncerState.SYNCED &&\n        uploadQueue.length + downloadQueue.size + pendingDownloads === 0\n    ) {\n        return true\n    }\n    return false\n}\n\nfunction updateSyncState(newState?: SyncerState) {\n    if (newState !== undefined && state !== newState) {\n        state = newState\n        postSyncStateMessage(uploadQueue.length, state)\n    }\n}\n\nfunction handleSyncError(error: Error | SyncerError, id: string) {\n    let syncerError: SyncerError = (instanceOfSyncerError(error)\n        ? error\n        : new SyncerError(error.message, \"Unknown Error\", false))\n\n    if (syncerError.needsReAuth) {\n        postTokenRequestMessage()\n        token = undefined\n        return\n    } else {\n        if (syncerError.payload.pause) updateSyncState(SyncerState.PAUSED)\n        postMessage({ id, error: syncerError.payload })\n    }\n}\n\nasync function workUploadQueueTasks() {\n    while (uploadQueue.length !== 0 && token && state !== SyncerState.PAUSED) {\n        updateSyncState(SyncerState.UPLOADING)\n        let { id, task } = uploadQueue[0]\n        try {\n            let payload = await task.work(token)\n            postMessage({ id, payload })\n            uploadQueue.shift()\n        } catch (error) {\n            handleSyncError(error, id)\n        }\n    }\n}\n\nfunction workDownloadQueueTasks() {\n    if (downloadQueue.size === 0 || !token || state === SyncerState.PAUSED) return\n    updateSyncState(SyncerState.DOWNLOADING)\n    for (let [id, task] of downloadQueue.entries()) {\n        pendingDownloads += 1\n        downloadQueue.delete(id)\n        task.work(token)\n            .then((payload: SyncerPayload) => postMessage({ id, payload }))\n            .catch((error: SyncerError) => handleSyncError(error, id))\n            .finally(() => pendingDownloads -= 1)\n    }\n}\n\nfunction sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\n","export * from \"./typeGuards\"\nexport * from \"./syncWebWorker\"\n","import { SyncerError } from \"../../errors\"\n\nexport function instanceOfSyncerError(error: Error | SyncerError): error is SyncerError {\n    return \"needsReAuth\" in error\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { GetRowsPayload, TestMode } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport function createGetRowsTask<P extends GetRowsPayload>(payload: P, testMode: TestMode): BaseTask<P> {\n    return (testMode === TestMode.OFF)\n        ? new GetRowsTask(payload)\n        : new MockGetRowsTask(payload, testMode)\n}\n\nexport class GetRowsTask<P extends GetRowsPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n        this.async = true\n    }\n\n    public async work(token: string): Promise<P> {\n        let range = `${this.payload.sheetTitle}!A:A`\n        let url = `https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}/values/${range}`\n        let headers = { Authorization: `Bearer ${token}` }\n        let opts: RequestInit = { method: \"GET\", cache: \"no-cache\", headers: headers }\n        let response = await fetch(url, opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(\n                JSON.stringify(error),\n                `Failed to load entries from ${this.payload.spreadsheetId}`,\n                response.status === 401)\n        } else {\n            let data: gapi.client.sheets.ValueRange = await response.json()\n            this.payload.rows = (data.values) ? data.values.map(row => row[0]) : []\n        }\n        return this.payload\n    }\n}\n\nexport class MockGetRowsTask<P extends GetRowsPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n        this.async = true\n    }\n\n    public async work(_token: string): Promise<P> {\n        if (this.testMode === TestMode.FAIL_GET_RANGE) {\n            throw new Error(\"mock fail\")\n        }\n        if (this.testMode === TestMode.RETURN_ROWS) {\n            this.payload.rows = [\"aaa\", \"bbb\", \"ccc\", \"@tag\", \"@key:value\"]\n        }\n        return this.payload\n    }\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { CreateRowPayload, TestMode } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport function createCreateRowTask<P extends CreateRowPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new CreateRowTask(payload)\n        : new MockCreateRowTask(payload, testMode)\n}\n\nexport class CreateRowTask<P extends CreateRowPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n    }\n\n    public async work(token: string): Promise<P> {\n        let range = { sheetId: this.payload.sheetId, startIndex: this.payload.idx, endIndex: this.payload.idx + 1, dimension: \"ROWS\" }\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ insertDimension: { range: range } }] })\n        let opts: RequestInit = { method: \"POST\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), \"Failed to create new entry\", response.status === 401)\n        }\n        return this.payload\n    }\n}\n\nexport class MockCreateRowTask<P extends CreateRowPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n    }\n\n    public async work(_token: string): Promise<P> {\n        if (this.testMode === TestMode.FAIL_DELETE_ROW) {\n            throw new Error(\"mock fail\")\n        }\n        return this.payload\n    }\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { ExtendSheetTask } from \"./ExtendSheetTask\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\nimport { UpdateRowPayload, SyncerPayload, TestMode, SyncerPayloadType } from \"../../../types\"\n\nexport function createUpdateRowTask<P extends UpdateRowPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new UpdateRowTask(payload)\n        : new MockUpdateRowTask(payload, testMode)\n}\n\nexport class UpdateRowTask<P extends UpdateRowPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n    }\n\n    public async work(token: string): Promise<P> {\n        let range = `${this.payload.sheetTitle}!A${this.payload.idx + 1}:A${this.payload.idx + 1}`\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}/values/${range}`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let params: Record<string, string> = { valueInputOption: \"RAW\" }\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n        let body = JSON.stringify({ range: range, majorDimension: \"ROWS\", values: [[this.payload.content]] })\n        let opts: RequestInit = { method: \"PUT\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        let data = await response.json()\n        if (!response.ok) {\n            if (data.error.message.includes(\"exceeds grid limits\")) {\n                let extendSheetTask: SyncerPayload = {\n                    type: SyncerPayloadType.EXTEND_SHEET,\n                    spreadsheetId: this.payload.spreadsheetId,\n                    sheetId: this.payload.sheetId,\n                    rejects: false,\n                }\n                await new ExtendSheetTask(extendSheetTask).work(token)\n                let secondResponse = await fetch(url.toString(), opts)\n                if (!secondResponse.ok) {\n                    let error: GapiErrorResponse = await response.json()\n                    throw new SyncerError(JSON.stringify(error), `Failed to update row: ${range}`, response.status === 401)\n                } else {\n                    return this.payload\n                }\n            }\n            throw new SyncerError(JSON.stringify(data), \"Failed to update rentry\", response.status === 401)\n        }\n        return this.payload\n    }\n}\n\nexport class MockUpdateRowTask<P extends UpdateRowPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n    }\n\n    public async work(): Promise<P> {\n        if (this.testMode === TestMode.FAIL_UPDATE_RANGE) {\n            throw new Error(\"mock fail\")\n        }\n        return this.payload\n    }\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { DeleteRowPayload, TestMode } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport function createDeleteRowTask<P extends DeleteRowPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new DeleteRowTask(payload)\n        : new MockDeleteRowTask(payload, testMode)\n}\n\nexport class DeleteRowTask<P extends DeleteRowPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n    }\n\n    public async work(token: string): Promise<P> {\n        let range = { sheetId: this.payload.sheetId, startRowIndex: this.payload.idx, endRowIndex: this.payload.idx + 1, startColumnIndex: 0 }\n        let url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}:batchUpdate`)\n        let headers = { Authorization: `Bearer ${token}` }\n        let body = JSON.stringify({ requests: [{ deleteRange: { range: range, shiftDimension: \"ROWS\" } }] })\n        let opts: RequestInit = { method: \"POST\", cache: \"no-cache\", headers: headers, body: body }\n        let response = await fetch(url.toString(), opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(JSON.stringify(error), \"Failed to delete entry\", response.status === 401)\n        }\n        return this.payload\n    }\n}\n\nexport class MockDeleteRowTask<P extends DeleteRowPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n    }\n\n    public async work(_token: string): Promise<P> {\n        if (this.testMode === TestMode.FAIL_DELETE_ROW) {\n            throw new Error(\"mock fail\")\n        }\n        return this.payload\n    }\n}\n","import { BaseTask } from \"./BaseTask\"\nimport { GetSpreadsheetPayload, TestMode } from \"../../../types\"\nimport { SyncerError, GapiErrorResponse } from \"../../../errors\"\n\nexport function createGetSpreadsheetTask<P extends GetSpreadsheetPayload>(payload: P, testMode: TestMode): BaseTask<P> | undefined {\n    return (testMode === TestMode.OFF)\n        ? new GetSpreadsheetTask(payload)\n        : new MockGetSpreadsheetTask(payload, testMode)\n}\n\nexport class GetSpreadsheetTask<P extends GetSpreadsheetPayload> extends BaseTask<P> {\n    constructor(payload: P) {\n        super(payload)\n        this.async = true\n    }\n\n    public async work(token: string): Promise<P> {\n        let url = `https://sheets.googleapis.com/v4/spreadsheets/${this.payload.spreadsheetId}`\n        let headers = { Authorization: `Bearer ${token}` }\n        let opts: RequestInit = { method: \"GET\", cache: \"no-cache\", headers: headers }\n        let response = await fetch(url, opts)\n        if (!response.ok) {\n            let error: GapiErrorResponse = await response.json()\n            throw new SyncerError(\n                JSON.stringify(error),\n                `Could not get spreadsheet information for ${this.payload.spreadsheetId}`,\n                response.status === 401,\n                false\n            )\n        } else {\n            this.payload.spreadsheet = await response.json()\n        }\n        return this.payload\n    }\n}\n\nexport class MockGetSpreadsheetTask<P extends GetSpreadsheetPayload> extends BaseTask<P> {\n    constructor(payload: P, testMode: TestMode) {\n        super(payload, testMode)\n        this.async = true\n    }\n\n    public async work(_token: string): Promise<P> {\n        if (this.testMode === TestMode.FAIL_GET_SPREADSHEET_SHEETS) {\n            throw new Error(\"mock fail\")\n        }\n        this.payload.spreadsheet = {\n            \"spreadsheetId\": this.payload.spreadsheetId,\n            \"spreadsheetUrl\": `https://docs.google.com/spreadsheets/d/${this.payload.spreadsheetId}/edit`,\n            \"properties\": {\n                \"title\": \"Mock Journal\",\n            },\n            \"sheets\": [\n                {\n                    \"properties\": {\n                        \"sheetId\": 0,\n                        \"title\": \"Sheet1\",\n                    }\n                },\n                {\n                    \"properties\": {\n                        \"sheetId\": 1124780423,\n                        \"title\": \"Sheet2\",\n                    }\n                },\n                {\n                    \"properties\": {\n                        \"sheetId\": 1286561930,\n                        \"title\": \"Sheet3\",\n                    }\n                }\n            ]\n        }\n        return this.payload\n    }\n}","import { SyncerPayload, SyncerPayloadType, SyncerState } from \"../../types\"\n\nexport function postSyncStateMessage(length: number, state: SyncerState) {\n    postResponse({\n        length: length,\n        state: state,\n        type: SyncerPayloadType.SYNC_STATE,\n        rejects: false,\n    })\n}\n\nexport function postTokenRequestMessage() {\n    postMessage({ type: SyncerPayloadType.TOKEN_REQUEST })\n}\n\nfunction postResponse(payload: SyncerPayload) {\n    postMessage({payload})\n}\n"],"sourceRoot":""}